{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MenuTypes } from 'src/app/shared/menu-types';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/data.Service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/material/snack-bar\";\nconst _c0 = function (a1) {\n  return {\n    \"form-control\": true,\n    \"is-invalid\": a1\n  };\n};\nconst _c1 = function () {\n  return [\"/menu-types\"];\n};\nexport class EditMenuTypeComponent {\n  // menu_TypeId!: number;\n  constructor(dataService, activated, router, dialog, snackBar) {\n    this.dataService = dataService;\n    this.activated = activated;\n    this.router = router;\n    this.dialog = dialog;\n    this.snackBar = snackBar;\n    this.MenuTypes = new MenuTypes();\n    //the form\n    //ensure all edit  forms are filled in\n    this.editMenuTypeForm = new FormGroup({\n      name: new FormControl('', [Validators.required])\n    });\n  }\n  ngOnInit() {\n    this.activated.params.subscribe(params => {\n      this.dataService.GetMenuTypeById(params['id']).subscribe(edit => {\n        this.MenuTypes = edit;\n        this.editMenuTypeForm.controls['name'].setValue(this.MenuTypes.name);\n      });\n    });\n  }\n  /*after submission of edit*/\n  editMenuType() {\n    let menuType = new MenuTypes();\n    menuType.name = this.editMenuTypeForm.value.name;\n    this.dataService.EditMenuType(this.MenuTypes.menu_TypeId, menuType).subscribe(edit => {\n      this.router.navigate(['/menu-types']);\n    });\n    this.showSuccessMessage('Menu Type edited successfully!');\n  }\n  showSuccessMessage(message) {\n    const snackBarRef = this.snackBar.open(message, 'Ok', {\n      duration: 3000,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom'\n    });\n  }\n}\nEditMenuTypeComponent.ɵfac = function EditMenuTypeComponent_Factory(t) {\n  return new (t || EditMenuTypeComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n};\nEditMenuTypeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditMenuTypeComponent,\n  selectors: [[\"app-edit-menu-type\"]],\n  decls: 19,\n  vars: 7,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-10\", \"order-md-1\"], [2, \"text-align\", \"center\", \"font-size\", \"50px\", \"font-family\", \"'Times New Roman', Times, serif\"], [1, \"container-md\"], [\"autocomplete\", \"off\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-1\"], [\"for\", \"name\", 1, \"form-label\", 2, \"font-weight\", \"bold\"], [\"type\", \"text\", \"Menu_TypeId\", \"name\", \"name\", \"name\", \"formControlName\", \"name\", \"placeholder\", \"Name\", 2, \"width\", \"300px\", 3, \"ngClass\"], [\"name\", \"\"], [\"type\", \"submit\", 1, \"btn\", \"btn-basic\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", 2, \"margin-left\", \"2px\", 3, \"routerLink\"]],\n  template: function EditMenuTypeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"app-navbar\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"h1\", 4);\n      i0.ɵɵtext(6, \"Edit Menu Type\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 5)(8, \"form\", 6);\n      i0.ɵɵlistener(\"ngSubmit\", function EditMenuTypeComponent_Template_form_ngSubmit_8_listener() {\n        return ctx.editMenuType();\n      });\n      i0.ɵɵelementStart(9, \"div\", 7)(10, \"label\", 8);\n      i0.ɵɵtext(11, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 9, 10)(14, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 11);\n      i0.ɵɵlistener(\"click\", function EditMenuTypeComponent_Template_button_click_15_listener() {\n        return ctx.editMenuType();\n      });\n      i0.ɵɵtext(16, \"Edit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 12);\n      i0.ɵɵtext(18, \"Cancel\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"formGroup\", ctx.editMenuTypeForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c0, ((tmp_1_0 = ctx.editMenuTypeForm.get(\"name\")) == null ? null : tmp_1_0.invalid) && (((tmp_1_0 = ctx.editMenuTypeForm.get(\"name\")) == null ? null : tmp_1_0.dirty) || ((tmp_1_0 = ctx.editMenuTypeForm.get(\"name\")) == null ? null : tmp_1_0.touched))));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", !ctx.editMenuTypeForm.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(6, _c1));\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJlZGl0LW1lbnUtdHlwZS5jb21wb25lbnQuY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWRtaW5pc3RyYXRpb24vbWVudS10eXBlcy9lZGl0LW1lbnUtdHlwZS9lZGl0LW1lbnUtdHlwZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSw0S0FBNEsiLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","MenuTypes","EditMenuTypeComponent","constructor","dataService","activated","router","dialog","snackBar","editMenuTypeForm","name","required","ngOnInit","params","subscribe","GetMenuTypeById","edit","controls","setValue","editMenuType","menuType","value","EditMenuType","menu_TypeId","navigate","showSuccessMessage","message","snackBarRef","open","duration","horizontalPosition","verticalPosition","i0","ɵɵdirectiveInject","i1","DataService","i2","ActivatedRoute","Router","i3","MatDialog","i4","MatSnackBar","selectors","decls","vars","consts","template","EditMenuTypeComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵlistener","EditMenuTypeComponent_Template_form_ngSubmit_8_listener","EditMenuTypeComponent_Template_button_click_15_listener","ɵɵadvance","ɵɵproperty","ɵɵpureFunction1","_c0","tmp_1_0","get","invalid","dirty","touched","valid","ɵɵpureFunction0","_c1"],"sources":["C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\menu-types\\edit-menu-type\\edit-menu-type.component.ts","C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\menu-types\\edit-menu-type\\edit-menu-type.component.html"],"sourcesContent":["import { Component, OnInit} from '@angular/core';\r\nimport { DataService } from 'src/app/service/data.Service';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MenuTypes } from 'src/app/shared/menu-types';\r\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\r\nimport { ConfirmationDialogComponent } from '../add-menu-type/confirmation-dialog/confirmation-dialog.component';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit-menu-type',\r\n  templateUrl: './edit-menu-type.component.html',\r\n  styleUrls: ['./edit-menu-type.component.css'],\r\n  \r\n})\r\nexport class EditMenuTypeComponent implements OnInit{\r\n  \r\n\r\n  // menu_TypeId!: number;\r\n \r\n\r\n  constructor(private dataService:DataService, private activated:ActivatedRoute,  private router : Router,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar,) { }\r\n\r\n  MenuTypes: MenuTypes = new MenuTypes();\r\n\r\n  //the form\r\n  //ensure all edit  forms are filled in\r\n \r\n\r\n  editMenuTypeForm: FormGroup = new FormGroup({\r\n    name: new FormControl('',[Validators.required])\r\n  })\r\n\r\n\r\n\r\n   ngOnInit(): void {\r\n\r\n    this.activated.params.subscribe(params => { \r\n      this.dataService.GetMenuTypeById(params['id']).subscribe(edit => { \r\n        this.MenuTypes = edit as MenuTypes;\r\n       this.editMenuTypeForm.controls['name'].setValue(this.MenuTypes.name);\r\n      })\r\n \r\n     })\r\n  }\r\n\r\n\r\n  /*after submission of edit*/\r\n  editMenuType()\r\n  {\r\n    let menuType = new MenuTypes();\r\n    menuType.name = this.editMenuTypeForm.value.name;\r\n   this.dataService.EditMenuType(this.MenuTypes.menu_TypeId,menuType).subscribe((edit:any) => {\r\n\r\n      this.router.navigate(['/menu-types'])\r\n    \r\n    \r\n   });\r\n   this.showSuccessMessage('Menu Type edited successfully!');\r\n\r\n  }\r\n\r\n  showSuccessMessage(message: string): void {\r\n    const snackBarRef: MatSnackBarRef<any> = this.snackBar.open(message, 'Ok', {\r\n      duration: 3000, // Duration in milliseconds\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'bottom'\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-2\">\r\n            <app-navbar></app-navbar>\r\n        </div>\r\n    <div class=\"col-md-10 order-md-1\">\r\n<h1 style=\"text-align: center; font-size: 50px; font-family: 'Times New Roman', Times, serif;\">Edit Menu Type</h1>\r\n<div class=\"container-md\">\r\n    <form [formGroup]=\"editMenuTypeForm\" autocomplete=\"off\" (ngSubmit)=\"editMenuType()\">\r\n        <div class=\"mb-1\">\r\n            <label for=\"name\" style=\"font-weight: bold;\" class=\"form-label\">Name</label>\r\n           \r\n                <input type=\"text\" #name [ngClass]=\"{'form-control': true, 'is-invalid': editMenuTypeForm.get('name')?.invalid &&\r\n                (editMenuTypeForm.get('name')?.dirty || editMenuTypeForm.get('name')?.touched)}\" Menu_TypeId=\"name\" name=\"name\"\r\n                    formControlName=\"name\" placeholder=\"Name\" style=\"width: 300px\"><br>\r\n        </div>\r\n        \r\n        <button type=\"submit\" class=\"btn btn-basic\" [disabled]=\"!editMenuTypeForm.valid\" (click)=\"editMenuType()\">Edit</button>\r\n        <button type=\"button\" class=\"btn btn-warning\" style=\"margin-left: 2px;\" [routerLink]=\"['/menu-types']\">Cancel</button>\r\n        \r\n    </form>\r\n</div>\r\n    </div>\r\n    </div>\r\n</div>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}