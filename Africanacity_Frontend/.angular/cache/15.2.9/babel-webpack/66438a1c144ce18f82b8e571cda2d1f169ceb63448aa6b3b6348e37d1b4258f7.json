{"ast":null,"code":"import { MatTableDataSource } from '@angular/material/table';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/data.Service\";\nimport * as i2 from \"@angular/material/sort\";\nimport * as i3 from \"@angular/material/table\";\nfunction MenuitemsComponent_th_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Name \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MenuitemsComponent_td_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r12 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r12.name, \" \");\n  }\n}\nfunction MenuitemsComponent_th_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Description \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MenuitemsComponent_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r13.description, \" \");\n  }\n}\nfunction MenuitemsComponent_th_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Menu Type \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MenuitemsComponent_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r14.menuType, \" \");\n  }\n}\nfunction MenuitemsComponent_th_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Food Type \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MenuitemsComponent_td_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r15 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r15.foodType, \" \");\n  }\n}\nfunction MenuitemsComponent_th_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 11);\n    i0.ɵɵtext(1, \" Menu Category \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction MenuitemsComponent_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const element_r16 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", element_r16.menuCategory, \" \");\n  }\n}\nfunction MenuitemsComponent_tr_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 13);\n  }\n}\nfunction MenuitemsComponent_tr_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tr\", 14);\n  }\n}\nexport class MenuitemsComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.displayedColumns = ['name', 'description', 'menuType', 'foodType', 'menuCategory'];\n    this.dataSource = new MatTableDataSource();\n  }\n  ngOnInit() {\n    this.dataService.GetAllMenuItems().subscribe(menuItems => {\n      this.dataSource.data = menuItems;\n    });\n  }\n  /*************************** MENU ITEM ************/\n  /**Get all menu items** */\n  /*GetAllMenuItems() {\r\n    this.dataService.GetAllMenuItems().subscribe(\r\n      (menuItems) => {\r\n        this.menuItems = menuItems;\r\n        // this.loadAssociatedNames();\r\n      },\r\n      (error) => {\r\n        console.error(error);\r\n      }\r\n    );\r\n  }*/\n  /*GetAllMenuItems() {\r\n    this.dataService.GetAllMenuItems().subscribe(result => {\r\n      let menuItemList:any[] = result\r\n      menuItemList.forEach((element) => {\r\n        this.menuItems.push(element);\r\n        \r\n        \r\n      });\r\n    })\r\n  }*/\n  /*GetAllMenuItems(): void {\r\n    this.http.get<MenuItem[]>('/MenuItems/GetAllMenuItems').subscribe(\r\n      (response) => {\r\n        this.menuItems = response;\r\n        this.loadAssociatedNames();\r\n      },\r\n      (error) => {\r\n        console.error('Failed to fetch menu items:', error);\r\n      }\r\n    );\r\n  }*/\n  // loadAssociatedNames(): void {\n  //   for (const menuItem of this.menuItems) {\n  //     this.getFoodTypeName(menuItem.foodTypeId);\n  //     this.getMenuItemCategoryName(menuItem.menuItemCategory_Id);\n  //     this.getFoodTypeName(menuItem.menu_TypeId);\n  //   }\n  // }\n  /*loadMenuTypeName(menuItem: MenuTypes): void {\r\n    this.http.get<any>(`api/MenuType/GetAllMenuTypes${menuItem.name}`).subscribe(\r\n      (response) => {\r\n        menuItem.name = response.name;\r\n      },\r\n      (error) => {\r\n        console.error('Failed to fetch menu type name:', error);\r\n      }\r\n    );\r\n  }*/\n  // getFoodTypeName(foodTypeId: number): void {\n  //   this.dataService.GetFoodTypeById(foodTypeId).subscribe(\n  //     (foodType) => {\n  //       const foundFoodType = this.foodTypes.find((ft) => ft.foodTypeId == foodType.foodTypeId);\n  //       if (foundFoodType) {\n  //         foundFoodType.name = foodType.name;\n  //       } else {\n  //         this.foodTypes.push(foodType);\n  //       }\n  //     },\n  //     (error) => {\n  //       console.error('Failed to fetch food type name:', error);\n  //     }\n  //   );\n  // }\n  // getMenuItemCategoryName(categoryId: number): void {\n  //   this.dataService.GetMenuItemCategoryById(categoryId).subscribe(\n  //     (menuItemCategory) => {\n  //       const foundCategory = this.menuCategories.find((mc) => mc.MenuItemCategoryId == menuItemCategory.category_Id);\n  //       if (foundCategory) {\n  //         foundCategory.name = menuItemCategory.name;\n  //       } else {\n  //         this.menuCategories.push(menuItemCategory);\n  //       }\n  //     },\n  //     (error) => {\n  //       console.error('Failed to fetch menu category name:', error);\n  //     }\n  //   );\n  // }\n  // getMenuTypeName(menuTypeId: number): void {\n  //   this.dataService.GetMenuTypeById(menuTypeId).subscribe(\n  //     (menuType) => {\n  //       const foundMenuType = this.menuTypes.find((mt) => mt.menu_TypeId == menuType.menu_TypeId);\n  //       if (foundMenuType) {\n  //         foundMenuType.name = menuType.name;\n  //       } else {\n  //         this.menuTypes.push(menuType);\n  //       }\n  //     },\n  //     (error) => {\n  //       console.error('Failed to fetch menu type name:', error);\n  //     }\n  //   );\n  // }\n  deleteItem() {\n    const confirmationSnackBar = this.snackBar.open('Are you sure you want to delete the menu type?', 'Delete', {\n      duration: 5000\n    });\n    confirmationSnackBar.onAction().subscribe(() => {\n      this.deleteItemFromServer();\n      window.location.reload();\n    });\n  }\n  deleteItemFromServer() {\n    this.deleteMenuItem;\n  }\n  deleteMenuItem(menu_ItemId) {\n    this.dataService.deleteMenuType(menu_ItemId).subscribe(result => {\n      this.deleteItem();\n    });\n  }\n}\nMenuitemsComponent.ɵfac = function MenuitemsComponent_Factory(t) {\n  return new (t || MenuitemsComponent)(i0.ɵɵdirectiveInject(i1.DataService));\n};\nMenuitemsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MenuitemsComponent,\n  selectors: [[\"app-menuitems\"]],\n  decls: 19,\n  vars: 3,\n  consts: [[1, \"mat-elevation-z8\"], [\"mat-table\", \"\", \"matSort\", \"\", 3, \"dataSource\"], [\"matColumnDef\", \"name\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\", 4, \"matHeaderCellDef\"], [\"mat-cell\", \"\", 4, \"matCellDef\"], [\"matColumnDef\", \"description\"], [\"matColumnDef\", \"menuType\"], [\"matColumnDef\", \"foodType\"], [\"matColumnDef\", \"menuCategory\"], [\"mat-header-row\", \"\", 4, \"matHeaderRowDef\"], [\"mat-row\", \"\", \"class\", \"mat-row\", 4, \"matRowDef\", \"matRowDefColumns\"], [\"mat-header-cell\", \"\", \"mat-sort-header\", \"\"], [\"mat-cell\", \"\"], [\"mat-header-row\", \"\"], [\"mat-row\", \"\", 1, \"mat-row\"]],\n  template: function MenuitemsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\", 1);\n      i0.ɵɵelementContainerStart(2, 2);\n      i0.ɵɵtemplate(3, MenuitemsComponent_th_3_Template, 2, 0, \"th\", 3);\n      i0.ɵɵtemplate(4, MenuitemsComponent_td_4_Template, 2, 1, \"td\", 4);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(5, 5);\n      i0.ɵɵtemplate(6, MenuitemsComponent_th_6_Template, 2, 0, \"th\", 3);\n      i0.ɵɵtemplate(7, MenuitemsComponent_td_7_Template, 2, 1, \"td\", 4);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(8, 6);\n      i0.ɵɵtemplate(9, MenuitemsComponent_th_9_Template, 2, 0, \"th\", 3);\n      i0.ɵɵtemplate(10, MenuitemsComponent_td_10_Template, 2, 1, \"td\", 4);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(11, 7);\n      i0.ɵɵtemplate(12, MenuitemsComponent_th_12_Template, 2, 0, \"th\", 3);\n      i0.ɵɵtemplate(13, MenuitemsComponent_td_13_Template, 2, 1, \"td\", 4);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵelementContainerStart(14, 8);\n      i0.ɵɵtemplate(15, MenuitemsComponent_th_15_Template, 2, 0, \"th\", 3);\n      i0.ɵɵtemplate(16, MenuitemsComponent_td_16_Template, 2, 1, \"td\", 4);\n      i0.ɵɵelementContainerEnd();\n      i0.ɵɵtemplate(17, MenuitemsComponent_tr_17_Template, 1, 0, \"tr\", 9);\n      i0.ɵɵtemplate(18, MenuitemsComponent_tr_18_Template, 1, 0, \"tr\", 10);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource);\n      i0.ɵɵadvance(16);\n      i0.ɵɵproperty(\"matHeaderRowDef\", ctx.displayedColumns);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRowDefColumns\", ctx.displayedColumns);\n    }\n  },\n  dependencies: [i2.MatSort, i2.MatSortHeader, i3.MatTable, i3.MatHeaderCellDef, i3.MatHeaderRowDef, i3.MatColumnDef, i3.MatCellDef, i3.MatRowDef, i3.MatHeaderCell, i3.MatCell, i3.MatHeaderRow, i3.MatRow],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJtZW51aXRlbXMuY29tcG9uZW50LmNzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYWRtaW5pc3RyYXRpb24vbWVudWl0ZW1zL21lbnVpdGVtcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxvS0FBb0siLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"names":["MatTableDataSource","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","element_r12","name","element_r13","description","element_r14","menuType","element_r15","foodType","element_r16","menuCategory","ɵɵelement","MenuitemsComponent","constructor","dataService","displayedColumns","dataSource","ngOnInit","GetAllMenuItems","subscribe","menuItems","data","deleteItem","confirmationSnackBar","snackBar","open","duration","onAction","deleteItemFromServer","window","location","reload","deleteMenuItem","menu_ItemId","deleteMenuType","result","ɵɵdirectiveInject","i1","DataService","selectors","decls","vars","consts","template","MenuitemsComponent_Template","rf","ctx","ɵɵelementContainerStart","ɵɵtemplate","MenuitemsComponent_th_3_Template","MenuitemsComponent_td_4_Template","ɵɵelementContainerEnd","MenuitemsComponent_th_6_Template","MenuitemsComponent_td_7_Template","MenuitemsComponent_th_9_Template","MenuitemsComponent_td_10_Template","MenuitemsComponent_th_12_Template","MenuitemsComponent_td_13_Template","MenuitemsComponent_th_15_Template","MenuitemsComponent_td_16_Template","MenuitemsComponent_tr_17_Template","MenuitemsComponent_tr_18_Template","ɵɵproperty"],"sources":["C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\menuitems\\menuitems.component.ts","C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\menuitems\\menuitems.component.html"],"sourcesContent":["import { AfterViewInit, Component, OnInit} from '@angular/core';\r\nimport { DataService } from 'src/app/service/data.Service';\r\nimport { MenuTypes } from 'src/app/shared/menu-types';\r\nimport {Router} from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MenuItem } from 'src/app/shared/menu-item';\r\nimport { FoodType } from 'src/app/shared/food-type';\r\nimport { MenuItemCategory } from 'src/app/shared/menu-item-category';\r\nimport {map, take } from 'rxjs/operators';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-menuitems',\r\n  templateUrl: './menuitems.component.html',\r\n  styleUrls: ['./menuitems.component.css']\r\n})\r\nexport class MenuitemsComponent implements OnInit{\r\n\r\n  displayedColumns: string[] = ['name', 'description', 'menuType','foodType', 'menuCategory'];\r\n  dataSource = new MatTableDataSource <MenuItem>();\r\n  snackBar: any;\r\n  constructor(private dataService: DataService) { }\r\n  httpClient: any;\r\n  apiUrl: any;\r\n\r\n\r\n    ngOnInit(): void{\r\n  \r\n      this.dataService.GetAllMenuItems().subscribe((menuItems:any) => {this.dataSource.data = menuItems})\r\n    }\r\n\r\n  /*************************** MENU ITEM ************/\r\n/**Get all menu items** */\r\n/*GetAllMenuItems() {\r\n  this.dataService.GetAllMenuItems().subscribe(\r\n    (menuItems) => {\r\n      this.menuItems = menuItems;\r\n      // this.loadAssociatedNames();\r\n    },\r\n    (error) => {\r\n      console.error(error);\r\n    }\r\n  );\r\n}*/\r\n\r\n/*GetAllMenuItems() {\r\n  this.dataService.GetAllMenuItems().subscribe(result => {\r\n    let menuItemList:any[] = result\r\n    menuItemList.forEach((element) => {\r\n      this.menuItems.push(element);\r\n      \r\n      \r\n    });\r\n  })\r\n}*/\r\n\r\n/*GetAllMenuItems(): void {\r\n  this.http.get<MenuItem[]>('/MenuItems/GetAllMenuItems').subscribe(\r\n    (response) => {\r\n      this.menuItems = response;\r\n      this.loadAssociatedNames();\r\n    },\r\n    (error) => {\r\n      console.error('Failed to fetch menu items:', error);\r\n    }\r\n  );\r\n}*/\r\n\r\n// loadAssociatedNames(): void {\r\n//   for (const menuItem of this.menuItems) {\r\n//     this.getFoodTypeName(menuItem.foodTypeId);\r\n//     this.getMenuItemCategoryName(menuItem.menuItemCategory_Id);\r\n//     this.getFoodTypeName(menuItem.menu_TypeId);\r\n//   }\r\n// }\r\n\r\n/*loadMenuTypeName(menuItem: MenuTypes): void {\r\n  this.http.get<any>(`api/MenuType/GetAllMenuTypes${menuItem.name}`).subscribe(\r\n    (response) => {\r\n      menuItem.name = response.name;\r\n    },\r\n    (error) => {\r\n      console.error('Failed to fetch menu type name:', error);\r\n    }\r\n  );\r\n}*/\r\n\r\n// getFoodTypeName(foodTypeId: number): void {\r\n//   this.dataService.GetFoodTypeById(foodTypeId).subscribe(\r\n//     (foodType) => {\r\n//       const foundFoodType = this.foodTypes.find((ft) => ft.foodTypeId == foodType.foodTypeId);\r\n//       if (foundFoodType) {\r\n//         foundFoodType.name = foodType.name;\r\n//       } else {\r\n//         this.foodTypes.push(foodType);\r\n//       }\r\n//     },\r\n//     (error) => {\r\n//       console.error('Failed to fetch food type name:', error);\r\n//     }\r\n//   );\r\n// }\r\n\r\n// getMenuItemCategoryName(categoryId: number): void {\r\n//   this.dataService.GetMenuItemCategoryById(categoryId).subscribe(\r\n//     (menuItemCategory) => {\r\n//       const foundCategory = this.menuCategories.find((mc) => mc.MenuItemCategoryId == menuItemCategory.category_Id);\r\n//       if (foundCategory) {\r\n//         foundCategory.name = menuItemCategory.name;\r\n//       } else {\r\n//         this.menuCategories.push(menuItemCategory);\r\n//       }\r\n//     },\r\n//     (error) => {\r\n//       console.error('Failed to fetch menu category name:', error);\r\n//     }\r\n//   );\r\n// }\r\n\r\n// getMenuTypeName(menuTypeId: number): void {\r\n//   this.dataService.GetMenuTypeById(menuTypeId).subscribe(\r\n//     (menuType) => {\r\n//       const foundMenuType = this.menuTypes.find((mt) => mt.menu_TypeId == menuType.menu_TypeId);\r\n//       if (foundMenuType) {\r\n//         foundMenuType.name = menuType.name;\r\n//       } else {\r\n//         this.menuTypes.push(menuType);\r\n//       }\r\n//     },\r\n//     (error) => {\r\n//       console.error('Failed to fetch menu type name:', error);\r\n//     }\r\n//   );\r\n// }\r\n\r\ndeleteItem(): void{\r\n \r\n  const confirmationSnackBar = this.snackBar.open('Are you sure you want to delete the menu type?','Delete',{\r\n      duration: 5000,\r\n    });\r\n\r\n    confirmationSnackBar.onAction().subscribe(() => {\r\n      this.deleteItemFromServer();\r\n      window.location.reload();\r\n    })\r\n\r\n  }\r\n\r\n  deleteItemFromServer(): void{\r\n    this.deleteMenuItem;\r\n  }\r\n\r\n\r\ndeleteMenuItem(menu_ItemId: Number){\r\n  this.dataService.deleteMenuType(menu_ItemId).subscribe(result => {\r\n    this.deleteItem();\r\n  });\r\n}\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n// ...\r\n\r\n/*populateColumnNames() {\r\n  for (const menuItem of this.menuItems) {\r\n    this.dataService.GetFoodTypeById(menuItem.foodType_Id)\r\n      .pipe(take(1))\r\n      .subscribe({\r\n        next: (foodTypeName) => {\r\n          menuItem.foodTypeName = foodTypeName;\r\n        },\r\n        error: (error) => {\r\n          console.error(error);\r\n        }\r\n      });\r\n\r\n    this.dataService.GetMenuItemCategoryById(menuItem.menuCategory_Id)\r\n      .pipe(take(1))\r\n      .subscribe({\r\n        next: (menuCategoryName) => {\r\n          menuItem.menuCategoryName = menuCategoryName;\r\n        },\r\n        error: (error) => {\r\n          console.error(error);\r\n        }\r\n      });\r\n\r\n    this.dataService.GetMenuTypeById(menuItem.menu_TypeId)\r\n      .pipe(take(1))\r\n      .subscribe({\r\n        next: (menuTypeName) => {\r\n          menuItem.menuTypeName = menuTypeName;\r\n        },\r\n        error: (error) => {\r\n          console.error(error);\r\n        }\r\n      });\r\n  }\r\n}*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","<div class=\"mat-elevation-z8\">\r\n \r\n  <table mat-table [dataSource]=\"dataSource\" matSort>\r\n  \r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"description\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Description </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"menuType\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Menu Type </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.menuType}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"foodType\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Food Type </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.foodType}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"menuCategory\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Menu Category </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.menuCategory}} </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row class=\"mat-row\" *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n    \r\n  </table>\r\n</div>  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}