{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Supplier } from 'src/app/shared/supplier';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/supplier.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/material/snack-bar\";\nexport class AddSupplierComponent {\n  constructor(supplierservice, router, dialog, snackBar) {\n    this.supplierservice = supplierservice;\n    this.router = router;\n    this.dialog = dialog;\n    this.snackBar = snackBar;\n    this.supplierTypesData = [];\n    this.supplierForm = new FormGroup({\n      name: new FormControl('', [Validators.required]),\n      supplierType: new FormControl('', [Validators.required]),\n      email_Address: new FormControl('', [Validators.required]),\n      physical_Address: new FormControl('', [Validators.required]),\n      phoneNumber: new FormControl('', [Validators.required])\n    });\n  }\n  ngOnInit() {\n    this.GetAllSupplierTypes();\n  }\n  GetAllSupplierTypes() {\n    this.supplierservice.GetAllSupplierTypes().subscribe(result => {\n      let supplierTypeList = result;\n      supplierTypeList.forEach(element => {\n        this.supplierTypesData.push(element);\n      });\n    });\n  }\n  onSubmit() {\n    let supplier = new Supplier();\n    supplier.name = this.supplierForm.value.name;\n    supplier.supplierType = this.supplierForm.value.firstName;\n    supplier.email_Address = this.supplierForm.value.email_Address;\n    supplier.physical_Address = this.supplierForm.value.physical_Address;\n    supplier.phoneNumber = this.supplierForm.value.phoneNumber;\n    this.supplierservice.AddSupplier(supplier).subscribe(result => {\n      this.router.navigate(['/view-suppliers']);\n    });\n    this.supplierservice.AddSupplier(supplier).subscribe(res => {\n      if (res.statusCode == 200) {\n        this.router.navigate(['/']);\n      } else {}\n    });\n    this.snackBar.open(this.supplierForm.get('name').value + ` created successfully`, 'X', {\n      duration: 5000\n    });\n  }\n  showSuccessMessage(message) {\n    const snackBarRef = this.snackBar.open(message, 'Ok', {\n      duration: 5000,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom'\n    });\n    snackBarRef.afterDismissed().subscribe(() => {\n      this.toastContainer.clear();\n    });\n  }\n}\nAddSupplierComponent.ɵfac = function AddSupplierComponent_Factory(t) {\n  return new (t || AddSupplierComponent)(i0.ɵɵdirectiveInject(i1.SupplierService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n};\nAddSupplierComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddSupplierComponent,\n  selectors: [[\"app-add-supplier\"]],\n  decls: 2,\n  vars: 0,\n  template: function AddSupplierComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"add-supplier works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","Supplier","AddSupplierComponent","constructor","supplierservice","router","dialog","snackBar","name","required","supplierType","email_Address","physical_Address","phoneNumber","ngOnInit","GetAllSupplierTypes","subscribe","result","supplierTypeList","forEach","element","supplierTypesData","push","onSubmit","supplier","supplierForm","value","firstName","AddSupplier","navigate","res","statusCode","open","get","duration","showSuccessMessage","message","snackBarRef","horizontalPosition","verticalPosition","afterDismissed","toastContainer","clear","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Supplier Management\\Suppliers\\add-supplier\\add-supplier.component.ts","C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Supplier Management\\Suppliers\\add-supplier\\add-supplier.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { SupplierService } from 'src/app/service/supplier.service';\nimport { SupplierType } from 'src/app/shared/SupplierTypes';\nimport { Supplier } from 'src/app/shared/supplier';\n\n@Component({\n  selector: 'app-add-supplier',\n  templateUrl: './add-supplier.component.html',\n  styleUrls: ['./add-supplier.component.css']\n})\nexport class AddSupplierComponent {\n\n  supplierTypesData:SupplierType[]=[]\n  toastContainer: any;\n\n  constructor(private  supplierservice: SupplierService, private router: Router, private dialog: MatDialog, private snackBar: MatSnackBar) { }\n\n  supplierForm: FormGroup = new FormGroup({\n    name: new FormControl('',[Validators.required]),\n    supplierType: new FormControl('',[Validators.required]),\n    email_Address: new FormControl('',[Validators.required]),\n    physical_Address: new FormControl('',[Validators.required]),\n    phoneNumber: new FormControl('',[Validators.required])\n \n  })\n\n  ngOnInit(): void {\n    this.GetAllSupplierTypes()\n  }\n\n  GetAllSupplierTypes(){\n    this.supplierservice.GetAllSupplierTypes().subscribe(result => {\n      let supplierTypeList:any[] = result\n      supplierTypeList.forEach((element) => {\n        this.supplierTypesData.push(element)\n      });\n    });\n  }\n\n  onSubmit(){\n\n    let supplier = new Supplier();\n    supplier.name = this.supplierForm.value.name;\n    supplier.supplierType = this.supplierForm.value.firstName;\n    supplier.email_Address = this.supplierForm.value.email_Address;\n    supplier.physical_Address = this.supplierForm.value.physical_Address;\n    supplier.phoneNumber = this.supplierForm.value.phoneNumber;\n\n        this.supplierservice.AddSupplier(supplier).subscribe(result => {\n              this.router.navigate(['/view-suppliers'])\n        })\n\n this.supplierservice.AddSupplier(supplier).subscribe((res:any) => {\n\n  if(res.statusCode == 200)\n  {\n    this.router.navigate(['/'])\n  }\n  else\n  {\n  \n  }\n });\n this.snackBar.open(this.supplierForm.get('name')!.value + ` created successfully`, 'X', {duration: 5000});\n     }\n\n     showSuccessMessage(message: string): void {\n      const snackBarRef: MatSnackBarRef<any> = this.snackBar.open(message, 'Ok', {\n        duration: 5000, // Duration in milliseconds\n        horizontalPosition: 'center',\n        verticalPosition: 'bottom'\n      });\n    \n        snackBarRef.afterDismissed().subscribe(() => {\n        this.toastContainer.clear();\n      });\n}\n\n}\n","<p>add-supplier works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}