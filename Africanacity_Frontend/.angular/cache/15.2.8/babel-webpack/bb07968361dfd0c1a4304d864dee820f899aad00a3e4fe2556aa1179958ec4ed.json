{"ast":null,"code":"import dayGridPlugin from '@fullcalendar/daygrid'; // Import the dayGrid plugin\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { AddScheduleComponent } from '../add-schedule/add-schedule.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/service/data.Service\";\nimport * as i3 from \"@fullcalendar/angular\";\nimport * as i4 from \"../../../navbar/navbar.component\";\nexport class ScheduleDisplayComponent {\n  //newEvents: any[] = []; \n  constructor(dialog, dataService) {\n    this.dialog = dialog;\n    this.dataService = dataService;\n    this.newEvents = [{\n      title: 'music slot',\n      date: '2023-07-19',\n      color: '#2196F3'\n    }, {\n      title: 'dance',\n      date: '2023-07-23',\n      color: '#2196F3'\n    }, {\n      title: 'poet slot',\n      date: '2023-07-05',\n      color: '#0000FF'\n    }];\n    this.calendarOptions = {\n      initialView: 'dayGridMonth',\n      plugins: [dayGridPlugin, interactionPlugin],\n      dateClick: this.onDateClick.bind(this),\n      events: this.newEvents,\n      eventColor: 'color'\n    };\n  }\n  ngOnInit() {\n    this.dataService.ScheduleDisplay().subscribe(results => {\n      this.newEvents = results.map(schedule => ({\n        id: schedule.scheduleId,\n        title: schedule.title,\n        start: schedule.start_time\n      }));\n      this.calendarOptions.events = this.newEvents;\n    }, error => {\n      console.error('Error fetching schedules:', error);\n    });\n  }\n  onDateClick(date) {\n    // Open the MatDialog and store the reference in dialogRef\n    this.dialogRef = this.dialog.open(AddScheduleComponent, {\n      width: '400px',\n      data: date.dateStr // Pass the selected dateStr to the dialog component if needed\n    });\n\n    this.dialogRef.componentInstance.eventAdded.subscribe(newEventData => {\n      if (newEventData) {\n        // Create a new event object based on the emitted data\n        let newEvent = {\n          id: newEventData.scheduleid,\n          title: newEventData.title,\n          start: newEventData.start_time\n        };\n        // Add the new event to the events array\n        this.newEvents.push(newEvent);\n        // Update the calendarOptions with the new events array\n        this.calendarOptions.events = this.newEvents;\n      }\n    });\n  }\n  createEvent() {\n    const dialogRef = this.dialog.open(AddScheduleComponent, {\n      width: '400px'\n    });\n    dialogRef.componentInstance.eventAdded.subscribe(newEventData => {\n      if (newEventData) {\n        const newEvent = {\n          title: newEventData.title,\n          // start: newEventData.start_time,\n          // end: newEventData.end_time,\n          color: '#2196F3' // ... (add other properties as needed)\n        };\n\n        this.newEvents.push(newEvent);\n        // Update the calendarOptions with the new events array\n        this.calendarOptions.events = this.newEvents;\n      }\n    });\n  }\n}\nScheduleDisplayComponent.ɵfac = function ScheduleDisplayComponent_Factory(t) {\n  return new (t || ScheduleDisplayComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.DataService));\n};\nScheduleDisplayComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleDisplayComponent,\n  selectors: [[\"app-schedule-display\"]],\n  decls: 9,\n  vars: 1,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-10\", \"order-md-1\"], [2, \"text-align\", \"center\", \"font-family\", \"'Times New Roman', Times, serif\", \"font-weight\", \"bolder\", \"font-size\", \"50px\"], [1, \"calendar-container\"], [3, \"options\"]],\n  template: function ScheduleDisplayComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"app-navbar\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"h3\", 4);\n      i0.ɵɵtext(6, \"Booking Schedule\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 5);\n      i0.ɵɵelement(8, \"full-calendar\", 6);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"options\", ctx.calendarOptions);\n    }\n  },\n  dependencies: [i3.FullCalendarComponent, i4.NavbarComponent],\n  styles: [\".calendar-container[_ngcontent-%COMP%] {\\r\\n    max-width: 800px;\\r\\n    margin: 0 auto;\\r\\n    padding: 20px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYm9va2luZy9zY2hlZHVsZS9zY2hlZHVsZS1kaXNwbGF5L3NjaGVkdWxlLWRpc3BsYXkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkI7QUFDM0I7SUFDSSxnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGFBQWE7RUFDZiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGNhbGVuZGFyLmNvbXBvbmVudC5jc3MgKi9cclxuLmNhbGVuZGFyLWNvbnRhaW5lciB7XHJcbiAgICBtYXgtd2lkdGg6IDgwMHB4O1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["dayGridPlugin","interactionPlugin","AddScheduleComponent","ScheduleDisplayComponent","constructor","dialog","dataService","title","date","color","initialView","plugins","dateClick","onDateClick","bind","events","newEvents","eventColor","ngOnInit","ScheduleDisplay","subscribe","results","map","schedule","id","scheduleId","start","start_time","calendarOptions","error","console","dialogRef","open","width","data","dateStr","componentInstance","eventAdded","newEventData","newEvent","scheduleid","push","createEvent","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\schedule\\schedule-display\\schedule-display.component.ts","C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\schedule\\schedule-display\\schedule-display.component.html"],"sourcesContent":["import { Component, ViewChild, OnInit, TemplateRef } from '@angular/core';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport dayGridPlugin from '@fullcalendar/daygrid'; // Import the dayGrid plugin\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { AddScheduleComponent } from '../add-schedule/add-schedule.component';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DataService } from 'src/app/service/data.Service';\n\n\n@Component({\n  selector: 'app-schedule-display',\n  templateUrl: './schedule-display.component.html',\n  styleUrls: ['./schedule-display.component.css']\n})\n\nexport class ScheduleDisplayComponent implements OnInit {\n \n  private dialogRef: any;\n  //newEvents: any[] = []; \n  constructor(private dialog: MatDialog, private dataService: DataService){}\n\n\n  ngOnInit() {\n    this.dataService.ScheduleDisplay().subscribe(\n      (results: any[]) => {\n        this.newEvents = results.map((schedule: any) => ({\n          id: schedule.scheduleId,\n          title: schedule.title,\n          start: schedule.start_time,\n        }));\n        this.calendarOptions.events = this.newEvents;\n      },\n      (error) => {\n        console.error('Error fetching schedules:', error);\n      }\n    );\n  }\n\n  newEvents: any = [\n    {title: 'music slot', date: '2023-07-19',color:'#2196F3'},\n    {title: 'dance', date: '2023-07-23',color:'#2196F3'},\n    {title: 'poet slot', date: '2023-07-05',color:'#0000FF'},\n  ];\n  calendarOptions: CalendarOptions = {\n   initialView: 'dayGridMonth',\n     plugins: [dayGridPlugin, interactionPlugin],\n     dateClick: this.onDateClick.bind(this),\n     events: this.newEvents,\n     eventColor: 'color',\n };\n\n onDateClick(date: { dateStr: string }) {\n  // Open the MatDialog and store the reference in dialogRef\n this.dialogRef = this.dialog.open(AddScheduleComponent, {\n    width: '400px',\n    data: date.dateStr, // Pass the selected dateStr to the dialog component if needed\n    \n  });\n  this.dialogRef.componentInstance.eventAdded.subscribe((newEventData: any) => {\n    if (newEventData) {\n      // Create a new event object based on the emitted data\n      let newEvent = {\n        id: newEventData.scheduleid,\n        title: newEventData.title,\n        start: newEventData.start_time,\n      };\n\n      // Add the new event to the events array\n      this.newEvents.push(newEvent);\n\n      // Update the calendarOptions with the new events array\n      this.calendarOptions.events = this.newEvents;\n    }\n  });\n}\n\n\n createEvent() {\n  const dialogRef = this.dialog.open(AddScheduleComponent, {\n    width: '400px',\n  });\n\n  dialogRef.componentInstance.eventAdded.subscribe((newEventData: any) => {\n    if (newEventData) {\n      const newEvent = {\n        title: newEventData.title,\n        // start: newEventData.start_time,\n        // end: newEventData.end_time,\n        color: '#2196F3', // ... (add other properties as needed)\n      };\n\n      this.newEvents.push(newEvent);\n\n      // Update the calendarOptions with the new events array\n      this.calendarOptions.events = this.newEvents;\n    }\n  });\n}\n\n\n}\n","\n<div class=\"container-fluid\">\n  <div class=\"row\">\n      <div class=\"col-md-2\">\n          <app-navbar></app-navbar>\n      </div>\n  <div class=\"col-md-10 order-md-1\">\n    <h3 style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-weight: bolder; font-size: 50px;\">Booking Schedule</h3>\n\n\n   <div class=\"calendar-container\">\n     <full-calendar [options]=\"calendarOptions\"></full-calendar>\n    </div> \n\n</div>\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}