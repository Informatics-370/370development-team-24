{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  PasswordVisibility() {\n    this.visablePassword = !this.visablePassword;\n  }\n  constructor(router, dataService, fb, snackBar) {\n    this.router = router;\n    this.dataService = dataService;\n    this.fb = fb;\n    this.snackBar = snackBar;\n    this.password = '';\n    this.visablePassword = false;\n    this.hide = false;\n    this.loginFormGroup = this.fb.group({\n      UserName: ['', [Validators.required, Validators.email]],\n      Password: ['', Validators.required]\n    });\n    this.isLoading = false;\n  }\n  ngOnInit() {}\n  LoginUser() {\n    if (this.loginFormGroup.valid) {\n      this.isLoading = true;\n      this.dataService.LoginUser(this.loginFormGroup.value).subscribe(result => {\n        localStorage.setItem('User', JSON.stringify(result));\n        this.loginFormGroup.reset();\n        this.router.navigate(['home']).then(navigated => {\n          if (navigated) {\n            this.snackBar.open(`Login successful.`, 'X', {\n              duration: 10000\n            });\n          }\n        });\n      }, response => {\n        this.isLoading = false;\n        if (response.status === 404) {\n          this.snackBar.open(response.error, 'X', {\n            duration: 5000\n          });\n        }\n        if (response.status === 500) {\n          this.snackBar.open(response.error, 'X', {\n            duration: 5000\n          });\n        }\n      });\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAa5D,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAYzBC,kBAAkB;IAChB,IAAI,CAACC,eAAe,GAAG,CAAC,IAAI,CAACA,eAAe;EAC9C;EAIAC,YAAoBC,MAAc,EACxBC,WAAwB,EACxBC,EAAe,EACfC,QAAqB;IAHX,WAAM,GAANH,MAAM;IAChB,gBAAW,GAAXC,WAAW;IACX,OAAE,GAAFC,EAAE;IACF,aAAQ,GAARC,QAAQ;IApBlB,aAAQ,GAAW,EAAE;IACrB,oBAAe,GAAY,KAAK;IAChC,SAAI,GAAG,KAAK;IAGZ,mBAAc,GAAc,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MACxCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACY,KAAK,CAAC,CAAC;MACvDC,QAAQ,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACW,QAAQ;KAEnC,CAAC;IAMF,cAAS,GAAW,KAAK;EAKU;EAEnCG,QAAQ,IACR;EAEAC,SAAS;IACP,IAAG,IAAI,CAACC,cAAc,CAACC,KAAK,EAC5B;MACE,IAAI,CAACC,SAAS,GAAG,IAAI;MAErB,IAAI,CAACZ,WAAW,CAACS,SAAS,CAAC,IAAI,CAACC,cAAc,CAACG,KAAK,CAAC,CAACC,SAAS,CAACC,MAAM,IAAG;QACvEC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC,CAAC;QACpD,IAAI,CAACL,cAAc,CAACU,KAAK,EAAE;QAC3B,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC,CAACC,IAAI,CAAEC,SAAkB,IAAI;UACzD,IAAGA,SAAS,EAAE;YACZ,IAAI,CAACrB,QAAQ,CAACsB,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;cAACC,QAAQ,EAAE;YAAK,CAAC,CAAC;;QAEpE,CAAC,CAAC;MACH,CAAC,EAAGC,QAA2B,IAAI;QACjC,IAAI,CAACd,SAAS,GAAG,KAAK;QACtB,IAAIc,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;UAC3B,IAAI,CAACzB,QAAQ,CAACsB,IAAI,CAACE,QAAQ,CAACE,KAAK,EAAE,GAAG,EAAE;YAACH,QAAQ,EAAE;UAAI,CAAC,CAAC;;QAE3D,IAAIC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;UAC1B,IAAI,CAACzB,QAAQ,CAACsB,IAAI,CAACE,QAAQ,CAACE,KAAK,EAAE,GAAG,EAAE;YAACH,QAAQ,EAAE;UAAI,CAAC,CAAC;;MAE7D,CAAC,CAAC;;EAEN;CACD;AAlDY9B,cAAc,eAN1BF,SAAS,CAAC;EACToC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GAEWpC,cAAc,CAkD1B;SAlDYA,cAAc","names":["Component","Validators","LoginComponent","PasswordVisibility","visablePassword","constructor","router","dataService","fb","snackBar","group","UserName","required","email","Password","ngOnInit","LoginUser","loginFormGroup","valid","isLoading","value","subscribe","result","localStorage","setItem","JSON","stringify","reset","navigate","then","navigated","open","duration","response","status","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { DataService } from '../service/data.Service';\r\nimport { User } from '../shared/user';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n  password: string = '';\r\n  visablePassword: boolean = false;\r\n  hide = false;\r\n\r\n\r\n  loginFormGroup: FormGroup = this.fb.group({\r\n    UserName: ['', [Validators.required, Validators.email]],\r\n    Password: ['', Validators.required],\r\n\r\n  })\r\n\r\n  PasswordVisibility(){\r\n    this.visablePassword = !this.visablePassword;\r\n  }\r\n\r\n  isLoading:boolean = false\r\n\r\n  constructor(private router: Router, \r\n    private dataService: DataService, \r\n    private fb: FormBuilder,  \r\n    private snackBar: MatSnackBar) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  LoginUser(){\r\n    if(this.loginFormGroup.valid)\r\n    {\r\n      this.isLoading = true\r\n\r\n      this.dataService.LoginUser(this.loginFormGroup.value).subscribe(result => {\r\n        localStorage.setItem('User', JSON.stringify(result))\r\n        this.loginFormGroup.reset();\r\n        this.router.navigate(['home']).then((navigated: boolean) => {\r\n          if(navigated) {\r\n            this.snackBar.open(`Login successful.`, 'X', {duration: 10000});\r\n          }\r\n       });\r\n      }, (response: HttpErrorResponse) => {\r\n        this.isLoading = false\r\n        if (response.status === 404) {\r\n          this.snackBar.open(response.error, 'X', {duration: 5000});\r\n        }\r\n        if (response.status === 500){\r\n          this.snackBar.open(response.error, 'X', {duration: 5000});\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}