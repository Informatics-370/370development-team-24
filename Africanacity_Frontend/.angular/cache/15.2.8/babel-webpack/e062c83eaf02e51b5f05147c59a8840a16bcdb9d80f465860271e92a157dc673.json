{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/data.Service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/card\";\nimport * as i8 from \"@angular/material/button\";\nexport class RegisterComponent {\n  constructor(router, dataService, fb, snackBar) {\n    this.router = router;\n    this.dataService = dataService;\n    this.fb = fb;\n    this.snackBar = snackBar;\n    this.registerFormGroup = this.fb.group({\n      UserName: ['', [Validators.required, Validators.email]],\n      Name: ['', [Validators.required]],\n      Surname: ['', [Validators.required]],\n      PhoneNumber: ['', [Validators.required, Validators.maxLength(10)]],\n      Password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(16)]],\n      ConfirmPassword: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(16)]]\n    });\n  }\n  ngOnInit() {}\n  RegisterUser() {\n    if (this.registerFormGroup.valid) {\n      this.dataService.RegisterUser(this.registerFormGroup.value).subscribe(() => {\n        this.registerFormGroup.reset();\n        this.router.navigate(['']).then(navigated => {\n          if (navigated) {\n            this.snackBar.open(`Registered successfully`, 'X', {\n              duration: 5000\n            });\n          }\n        });\n      }, response => {\n        if (response.status === 403) {\n          this.snackBar.open(response.error, 'X', {\n            duration: 5000\n          });\n        }\n        if (response.status === 500) {\n          this.snackBar.open(response.error, 'X', {\n            duration: 5000\n          });\n        }\n      });\n    }\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.DataService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 38,\n  vars: 1,\n  consts: [[\"fxLayout\", \"row\", \"fxLayoutAlign\", \"center center\", 1, \"login-wrapper\"], [1, \"box\"], [1, \"form\", 3, \"formGroup\"], [1, \"full-width\"], [\"matInput\", \"\", \"placeholder\", \"Enter a valid Email address\", \"formControlName\", \"UserName\"], [\"matInput\", \"\", \"placeholder\", \"Enter your name\", \"formControlName\", \"Name\"], [\"matInput\", \"\", \"placeholder\", \"Enter your surname\", \"formControlName\", \"Surname\"], [\"matInput\", \"\", \"placeholder\", \"Enter a valid Phone Number\", \"formControlName\", \"PhoneNumber\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Enter between 8 to 16 characters\", \"formControlName\", \"Password\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Enter between 8 to 16 characters\", \"formControlName\", \"ConfirmPassword\"], [\"mat-stroked-button\", \"\", \"color\", \"primary\", 1, \"btn-block\", 3, \"click\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-card-header\")(3, \"mat-card-title\");\n      i0.ɵɵtext(4, \"Register\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"form\", 2)(6, \"mat-card-content\")(7, \"mat-form-field\", 3)(8, \"mat-label\");\n      i0.ɵɵtext(9, \"Email Address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"mat-form-field\", 3)(13, \"mat-label\");\n      i0.ɵɵtext(14, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"br\");\n      i0.ɵɵelementStart(17, \"mat-form-field\", 3)(18, \"mat-label\");\n      i0.ɵɵtext(19, \"Surname\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"br\");\n      i0.ɵɵelementStart(22, \"mat-form-field\", 3)(23, \"mat-label\");\n      i0.ɵɵtext(24, \"Phone Number\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(25, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(26, \"br\");\n      i0.ɵɵelementStart(27, \"mat-form-field\", 3)(28, \"mat-label\");\n      i0.ɵɵtext(29, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(30, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(31, \"br\");\n      i0.ɵɵelementStart(32, \"mat-form-field\", 3)(33, \"mat-label\");\n      i0.ɵɵtext(34, \"Confirm Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(35, \"input\", 9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(36, \"button\", 10);\n      i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_36_listener() {\n        return ctx.RegisterUser();\n      });\n      i0.ɵɵtext(37, \"Register\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerFormGroup);\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i5.MatFormField, i5.MatLabel, i6.MatInput, i7.MatCard, i7.MatCardContent, i7.MatCardHeader, i7.MatCardTitle, i8.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;;AAWnE,OAAM,MAAOC,iBAAiB;EAW5BC,YAAoBC,MAAc,EAAUC,WAAwB,EAAUC,EAAe,EAAUC,QAAqB;IAAxG,WAAM,GAANH,MAAM;IAAkB,gBAAW,GAAXC,WAAW;IAAuB,OAAE,GAAFC,EAAE;IAAuB,aAAQ,GAARC,QAAQ;IAT/G,sBAAiB,GAAc,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAC3CC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACR,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACU,KAAK,CAAC,CAAC;MACvDC,IAAI,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACS,QAAQ,CAAC,CAAC;MACjCG,OAAO,EAAE,CAAC,EAAE,EAAE,CAACZ,UAAU,CAACS,QAAQ,CAAC,CAAC;MACpCI,WAAW,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACc,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MAClEC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,EAAEhB,UAAU,CAACc,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;MACxFG,eAAe,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACS,QAAQ,EAAET,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,EAAEhB,UAAU,CAACc,SAAS,CAAC,EAAE,CAAC,CAAC;KAC/F,CAAC;EAE8H;EAEhII,QAAQ,IACR;EAEAC,YAAY;IAEV,IAAG,IAAI,CAACC,iBAAiB,CAACC,KAAK,EAC/B;MACE,IAAI,CAACjB,WAAW,CAACe,YAAY,CAAC,IAAI,CAACC,iBAAiB,CAACE,KAAK,CAAC,CAACC,SAAS,CAAC,MAAK;QACzE,IAAI,CAACH,iBAAiB,CAACI,KAAK,EAAE;QAC9B,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAEC,SAAkB,IAAI;UACrD,IAAGA,SAAS,EAAE;YACZ,IAAI,CAACrB,QAAQ,CAACsB,IAAI,CAAC,yBAAyB,EAAE,GAAG,EAAE;cAACC,QAAQ,EAAE;YAAI,CAAC,CAAC;;QAEzE,CAAC,CAAC;MACH,CAAC,EAAGC,QAA2B,IAAI;QACjC,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;UAC3B,IAAI,CAACzB,QAAQ,CAACsB,IAAI,CAACE,QAAQ,CAACE,KAAK,EAAE,GAAG,EAAE;YAACH,QAAQ,EAAE;UAAI,CAAC,CAAC;;QAE3D,IAAIC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;UAC1B,IAAI,CAACzB,QAAQ,CAACsB,IAAI,CAACE,QAAQ,CAACE,KAAK,EAAE,GAAG,EAAE;YAACH,QAAQ,EAAE;UAAI,CAAC,CAAC;;MAE7D,CAAC,CAAC;;EAEN;;AApCW5B,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAgC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb9BC,8BAAwE;MAGhDA,wBAAQ;MAAAA,iBAAiB;MAE3CA,+BAAmD;MAGlCA,6BAAa;MAAAA,iBAAY;MACpCA,4BAAqF;MACvFA,iBAAiB;MAAAA,sBAAI;MACrBA,0CAAmC;MACtBA,qBAAI;MAAAA,iBAAY;MAC7BA,4BAAsE;MACxEA,iBAAiB;MAAAA,sBAAI;MACrBA,0CAAmC;MACpBA,wBAAO;MAAAA,iBAAY;MAChCA,4BAA2E;MAC7EA,iBAAiB;MAAAA,sBAAI;MACrBA,0CAAmC;MACpBA,6BAAY;MAAAA,iBAAY;MACrCA,4BAAuF;MACzFA,iBAAiB;MAAAA,sBAAI;MACnBA,0CAAmC;MACpBA,yBAAQ;MAAAA,iBAAY;MACjCA,4BAA0G;MAC5GA,iBAAiB;MAAAA,sBAAI;MACrBA,0CAAmC;MACtBA,iCAAgB;MAAAA,iBAAY;MACzCA,4BAAiH;MACnHA,iBAAiB;MAEjBA,mCAAsF;MAAzBA;QAAA,OAASC,kBAAc;MAAA,EAAC;MAACD,yBAAQ;MAAAA,iBAAS;;;MA3BtFA,eAA+B;MAA/BA,iDAA+B","names":["Validators","RegisterComponent","constructor","router","dataService","fb","snackBar","group","UserName","required","email","Name","Surname","PhoneNumber","maxLength","Password","minLength","ConfirmPassword","ngOnInit","RegisterUser","registerFormGroup","valid","value","subscribe","reset","navigate","then","navigated","open","duration","response","status","error","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\login\\register\\register.component.ts","C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\login\\register\\register.component.html"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\nimport { DataService } from 'src/app/service/data.Service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  registerFormGroup: FormGroup = this.fb.group({\r\n    UserName: ['', [Validators.required, Validators.email]],\r\n    Name: ['', [Validators.required]],\r\n    Surname: ['', [Validators.required]],\r\n    PhoneNumber: ['', [Validators.required, Validators.maxLength(10)]],\r\n    Password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(16)]],\r\n    ConfirmPassword: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(16)]],\r\n  })\r\n\r\n  constructor(private router: Router, private dataService: DataService, private fb: FormBuilder, private snackBar: MatSnackBar) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  RegisterUser(){\r\n\r\n    if(this.registerFormGroup.valid)\r\n    {\r\n      this.dataService.RegisterUser(this.registerFormGroup.value).subscribe(() => {\r\n        this.registerFormGroup.reset();\r\n        this.router.navigate(['']).then((navigated: boolean) => {\r\n          if(navigated) {\r\n            this.snackBar.open(`Registered successfully`, 'X', {duration: 5000});\r\n          }\r\n       });\r\n      }, (response: HttpErrorResponse) => {\r\n        if (response.status === 403) {\r\n          this.snackBar.open(response.error, 'X', {duration: 5000});\r\n        }\r\n        if (response.status === 500){\r\n          this.snackBar.open(response.error, 'X', {duration: 5000});\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n","<div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n    <mat-card class=\"box\">\r\n      <mat-card-header>\r\n        <mat-card-title>Register</mat-card-title>\r\n      </mat-card-header>\r\n      <form class=\"form\" [formGroup]=\"registerFormGroup\">\r\n        <mat-card-content>\r\n          <mat-form-field class=\"full-width\">\r\n            <mat-label>Email Address</mat-label>\r\n            <input matInput placeholder=\"Enter a valid Email address\" formControlName=\"UserName\">\r\n          </mat-form-field><br>\r\n          <mat-form-field class=\"full-width\">\r\n            <mat-label>Name</mat-label>\r\n          <input  matInput placeholder=\"Enter your name\" formControlName=\"Name\">\r\n        </mat-form-field><br>\r\n        <mat-form-field class=\"full-width\">\r\n            <mat-label>Surname</mat-label>\r\n          <input matInput placeholder=\"Enter your surname\" formControlName=\"Surname\">\r\n        </mat-form-field><br>\r\n        <mat-form-field class=\"full-width\">\r\n            <mat-label>Phone Number</mat-label>\r\n          <input matInput placeholder=\"Enter a valid Phone Number\" formControlName=\"PhoneNumber\">\r\n        </mat-form-field><br>\r\n          <mat-form-field class=\"full-width\">\r\n              <mat-label>Password</mat-label>\r\n            <input type=\"password\" matInput placeholder=\"Enter between 8 to 16 characters\" formControlName=\"Password\">\r\n          </mat-form-field><br>\r\n          <mat-form-field class=\"full-width\">\r\n            <mat-label>Confirm Password</mat-label>\r\n          <input type=\"password\" matInput placeholder=\"Enter between 8 to 16 characters\" formControlName=\"ConfirmPassword\">\r\n        </mat-form-field>\r\n        </mat-card-content>\r\n        <button mat-stroked-button color=\"primary\" class=\"btn-block\" (click)=\"RegisterUser()\">Register</button>\r\n      </form>\r\n    </mat-card>\r\n  </div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}