{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class InventoryService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiUrl = 'http://localhost:49991/api/';\n    this.inventoryItems = [];\n    this.checklistItems = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        ContentType: 'application/json'\n      })\n    };\n  }\n  //Get All Inventory Items\n  GetAllInventoryItems() {\n    return this.httpClient.get(`${this.apiUrl}InventoryItem/GetAllInventoryItems`).pipe(map(result => result));\n  }\n  GetInventoryItem(inventory_ItemId) {\n    return this.httpClient.get(`${this.apiUrl}InventoryItem/GetInventoryItem` + \"/\" + inventory_ItemId).pipe(map(result => result));\n  }\n  DeleteInventoryItem(inventory_ItemId) {\n    return this.httpClient.delete(`${this.apiUrl}InventoryItem/DeleteInventoryItem` + \"/\" + inventory_ItemId, this.httpOptions);\n  }\n  // EditSupplier(supplierId: Number, supplier: Supplier)\n  // {\n  //   return this.httpClient.put(`${this.apiUrl}Supplier/EditSupplier/${supplierId}`,supplier, this.httpOptions)\n  // }\n  EditInventoryItem(inventory_ItemId, inventoryitem) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.httpClient.put(`${this.apiUrl}InventoryItem/EditInventoryItem/${inventory_ItemId}`, inventoryitem, httpOptions);\n  }\n  AddInventoryItem(inventoryitem) {\n    return this.httpClient.post(`${this.apiUrl}InventoryItem/AddInventoryItem`, inventoryitem, this.httpOptions).pipe(catchError(error => {\n      console.error('Error adding inventory item:', error);\n      return throwError(error);\n    }));\n  }\n  UpdateInventoryItem(inventory_ItemId, inventoryitem) {\n    // Perform client-side operations or validations here\n    // Update the item locally\n    const updatedItemIndex = this.inventoryItems.findIndex(item => item.inventory_ItemId === inventory_ItemId);\n    if (updatedItemIndex !== -1) {\n      this.inventoryItems[updatedItemIndex] = inventoryitem;\n      console.log('Inventory item updated successfully.'); // Success message\n    } else {\n      console.log('Failed to update inventory item: Item not found.'); // Error message\n    }\n\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.httpClient.put(`${this.apiUrl}InventoryItem/UpdateItems/${inventory_ItemId}`, inventoryitem, httpOptions);\n  }\n  // Get Inventory Types\n  GetAllInventoryTypes() {\n    return this.httpClient.get(`${this.apiUrl}InventoryType/GetAllInventoryTypes`).pipe(map(result => result));\n  }\n  GetInventoryType(inventory_TypeId) {\n    return this.httpClient.get(`${this.apiUrl}InventoryType/GetInventoryType` + \"/\" + inventory_TypeId).pipe(map(result => result));\n  }\n  DeleteInventoryType(inventory_TypeId) {\n    return this.httpClient.delete(`${this.apiUrl}InventoryType/DeleteInventoryType` + \"/\" + inventory_TypeId, this.httpOptions);\n  }\n  EditInventoryType(inventory_TypeId, inventorytype) {\n    return this.httpClient.put(`${this.apiUrl}InventoryType/EditInventoryType/${inventory_TypeId}`, inventorytype, this.httpOptions);\n  }\n  AddInventoryType(inventorytype) {\n    return this.httpClient.post(`${this.apiUrl}InventoryType/AddInventoryType`, inventorytype, this.httpOptions);\n  }\n  GetInventoryItemsByType(inventory_TypeId) {\n    return this.httpClient.get(`${this.apiUrl}InventoryItem/items/${inventory_TypeId}`).pipe(catchError(error => {\n      console.error('Error retrieving inventory items:', error);\n      return throwError(error);\n    }));\n  }\n  addItem(item) {\n    this.checklistItems.push(item);\n  }\n  getChecklistItems() {\n    return this.checklistItems;\n  }\n  addToChecklist(item) {\n    // Check if the item is already in the checklist\n    const existingItem = this.checklistItems.find(checklistItem => checklistItem.inventory_ItemId === item.inventory_ItemId);\n    if (existingItem) {\n      // Item already exists in the checklist, handle accordingly (e.g., show error message)\n      console.error('Item already exists in the checklist.');\n      return;\n    }\n    // Add the item to the checklist\n    this.checklistItems.push(item);\n    console.log('Item added to the checklist:', item);\n  }\n  //Submit Stock Take \n  submitStockTake(stockTake) {\n    return this.httpClient.post(`${this.apiUrl}StockTake/SubmitStockTake`, stockTake);\n  }\n  getInventoryItemsByType(typeId) {\n    return this.httpClient.get(`${this.apiUrl}StockTake/${typeId}`);\n  }\n  SendEmail(item, predefinedLevel) {\n    // Make a request to the backend API to check inventory levels\n    // and send email notifications if necessary\n    return this.httpClient.post(`${this.apiUrl}/api`, {}).pipe(catchError(error => {\n      console.error('Failed to send notification:', error);\n      return throwError(error);\n    }));\n  }\n}\nInventoryService.ɵfac = function InventoryService_Factory(t) {\n  return new (t || InventoryService)(i0.ɵɵinject(i1.HttpClient));\n};\nInventoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InventoryService,\n  factory: InventoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","catchError","map","throwError","InventoryService","constructor","httpClient","headers","ContentType","GetAllInventoryItems","get","apiUrl","pipe","result","GetInventoryItem","inventory_ItemId","DeleteInventoryItem","delete","httpOptions","EditInventoryItem","inventoryitem","put","AddInventoryItem","post","error","console","UpdateInventoryItem","updatedItemIndex","inventoryItems","findIndex","item","log","GetAllInventoryTypes","GetInventoryType","inventory_TypeId","DeleteInventoryType","EditInventoryType","inventorytype","AddInventoryType","GetInventoryItemsByType","addItem","checklistItems","push","getChecklistItems","addToChecklist","existingItem","find","checklistItem","submitStockTake","stockTake","getInventoryItemsByType","typeId","SendEmail","predefinedLevel","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\service\\inventory.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { catchError, map, Observable, Subject, throwError } from 'rxjs';\r\nimport { InventoryType } from '../shared/inventorytype';\r\nimport { InventoryItem } from '../shared/inventoryitem';\r\nimport { StockTake } from '../shared/stocktake';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class InventoryService {\r\n  \r\n    apiUrl = 'http://localhost:49991/api/'\r\n    private inventoryItems: InventoryItem[] = [];\r\n    private checklistItems: InventoryItem[] = [];\r\n  \r\n    httpOptions ={\r\n      headers: new HttpHeaders({\r\n        ContentType: 'application/json'\r\n      })\r\n    }\r\n\r\n    constructor(private httpClient: HttpClient) { \r\n    }\r\n    //Get All Inventory Items\r\n    GetAllInventoryItems(): Observable<any>{\r\n        return this.httpClient.get(`${this.apiUrl}InventoryItem/GetAllInventoryItems`)\r\n        .pipe(map(result => result))\r\n      }\r\n\r\n      GetInventoryItem(inventory_ItemId: number) {\r\n        return this.httpClient.get(`${this.apiUrl}InventoryItem/GetInventoryItem` + \"/\" + inventory_ItemId)\r\n        .pipe(map(result => result))\r\n      }\r\n\r\n      DeleteInventoryItem(inventory_ItemId: Number)\r\n      {\r\n        return this.httpClient.delete<string>(`${this.apiUrl}InventoryItem/DeleteInventoryItem` + \"/\" + inventory_ItemId, this.httpOptions)\r\n      }\r\n\r\n      // EditSupplier(supplierId: Number, supplier: Supplier)\r\n      // {\r\n      //   return this.httpClient.put(`${this.apiUrl}Supplier/EditSupplier/${supplierId}`,supplier, this.httpOptions)\r\n      // }\r\n\r\n      EditInventoryItem(inventory_ItemId: number, inventoryitem: InventoryItem): Observable<any> {\r\n        const httpOptions = {\r\n          headers: new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n          })\r\n        };\r\n        return this.httpClient.put(`${this.apiUrl}InventoryItem/EditInventoryItem/${inventory_ItemId}`, inventoryitem, httpOptions);\r\n      }\r\n\r\n      AddInventoryItem(inventoryitem: InventoryItem) {\r\n        return this.httpClient.post(`${this.apiUrl}InventoryItem/AddInventoryItem`, inventoryitem, this.httpOptions)\r\n          .pipe(\r\n            catchError(error => {\r\n              console.error('Error adding inventory item:', error);\r\n              return throwError(error);\r\n            })\r\n          );\r\n      }\r\n\r\n      UpdateInventoryItem(inventory_ItemId: number, inventoryitem: InventoryItem): Observable<any> {\r\n        // Perform client-side operations or validations here\r\n        // Update the item locally\r\n    \r\n        const updatedItemIndex = this.inventoryItems.findIndex(item => item.inventory_ItemId === inventory_ItemId);\r\n        if (updatedItemIndex !== -1) {\r\n          this.inventoryItems[updatedItemIndex] = inventoryitem;\r\n          console.log('Inventory item updated successfully.'); // Success message\r\n        } else {\r\n          console.log('Failed to update inventory item: Item not found.'); // Error message\r\n        }\r\n    \r\n        const httpOptions = {\r\n          headers: new HttpHeaders({\r\n            'Content-Type': 'application/json'\r\n          })\r\n        };\r\n    \r\n        return this.httpClient.put(`${this.apiUrl}InventoryItem/UpdateItems/${inventory_ItemId}`, inventoryitem, httpOptions);\r\n      }\r\n\r\n    // Get Inventory Types\r\n\r\n    GetAllInventoryTypes(): Observable<any>{\r\n      return this.httpClient.get(`${this.apiUrl}InventoryType/GetAllInventoryTypes`)\r\n      .pipe(map(result => result))\r\n    }\r\n    \r\n\r\n    GetInventoryType(inventory_TypeId: Number) {\r\n      return this.httpClient.get(`${this.apiUrl}InventoryType/GetInventoryType` + \"/\" + inventory_TypeId)\r\n      .pipe(map(result => result))\r\n    }\r\n    \r\n    DeleteInventoryType(inventory_TypeId: Number)\r\n    {\r\n      return this.httpClient.delete<string>(`${this.apiUrl}InventoryType/DeleteInventoryType` + \"/\" + inventory_TypeId, this.httpOptions)\r\n    }\r\n\r\n    EditInventoryType(inventory_TypeId: number, inventorytype: InventoryType)\r\n    {\r\n      return this.httpClient.put(`${this.apiUrl}InventoryType/EditInventoryType/${inventory_TypeId}`,inventorytype, this.httpOptions)\r\n    }\r\n\r\n    AddInventoryType(inventorytype: InventoryType)\r\n    {\r\n       return this.httpClient.post(`${this.apiUrl}InventoryType/AddInventoryType`, inventorytype, this.httpOptions)\r\n    }\r\n  \r\n    GetInventoryItemsByType(inventory_TypeId: number): Observable<InventoryItem[]> {\r\n      return this.httpClient.get<InventoryItem[]>(`${this.apiUrl}InventoryItem/items/${inventory_TypeId}`)\r\n        .pipe(\r\n          catchError(error => {\r\n            console.error('Error retrieving inventory items:', error);\r\n            return throwError(error);\r\n          })\r\n        );\r\n    }\r\n\r\n    addItem(item: InventoryItem) {\r\n      this.checklistItems.push(item);\r\n    }\r\n\r\n    getChecklistItems(): InventoryItem[] {\r\n      return this.checklistItems;\r\n    }\r\n    \r\n    addToChecklist(item: InventoryItem) {\r\n      // Check if the item is already in the checklist\r\n      const existingItem = this.checklistItems.find((checklistItem) => checklistItem.inventory_ItemId === item.inventory_ItemId);\r\n      if (existingItem) {\r\n        // Item already exists in the checklist, handle accordingly (e.g., show error message)\r\n        console.error('Item already exists in the checklist.');\r\n        return;\r\n      }\r\n  \r\n      // Add the item to the checklist\r\n      this.checklistItems.push(item);\r\n      console.log('Item added to the checklist:', item);\r\n    }\r\n\r\n    //Submit Stock Take \r\n \r\n    submitStockTake(stockTake: StockTake): Observable<any> {\r\n      return this.httpClient.post<any>(`${this.apiUrl}StockTake/SubmitStockTake`, stockTake);\r\n    }\r\n\r\n    getInventoryItemsByType(typeId: number): Observable<InventoryItem[]> {\r\n      return this.httpClient.get<InventoryItem[]>(`${this.apiUrl}StockTake/${typeId}`);\r\n    }\r\n\r\n    SendEmail(item: InventoryItem, predefinedLevel: number) {\r\n      // Make a request to the backend API to check inventory levels\r\n      // and send email notifications if necessary\r\n      return this.httpClient.post(`${this.apiUrl}/api`, {}).pipe(\r\n        catchError((error) => {\r\n          console.error('Failed to send notification:', error);\r\n          return throwError(error);\r\n        })\r\n      );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}