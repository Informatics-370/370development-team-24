{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/data.Service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/list\";\nimport * as i12 from \"@angular/material/button\";\nimport * as i13 from \"@angular/material/icon\";\nfunction AddScheduleComponent_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", item_r1.eventId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r1.event_Name);\n  }\n}\nexport class AddScheduleComponent {\n  //event_name: string;\n  //date: Date;\n  constructor(dataService, fb, router, snackBar, dialogRef, data) {\n    this.dataService = dataService;\n    this.fb = fb;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.formData = new FormData();\n    this.bookingevents = [];\n    this.newEvents = [];\n    this.scheduleform = this.fb.group({\n      title: ['', Validators.required],\n      start_time: [null, Validators.required],\n      end_time: [null, Validators.required],\n      event: [null, Validators.required],\n      description: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.GetAllEvents();\n  }\n  //Events method\n  GetAllEvents() {\n    this.dataService.GetAllEvents().subscribe(result => {\n      let eventsList = result;\n      eventsList.forEach(element => {\n        this.bookingevents.push(element);\n      });\n    });\n  }\n  onSave() {\n    //  if (this.scheduleform.valid) {\n    //      const eventData = this.scheduleform.value;\n    //     // Add any additional logic (e.g., saving to backend) here if needed.\n    //  this.dialogRef.close(eventData);\n    //   }\n    /*const newEvent = {\r\n      title: this.event_name,\r\n      date: this.date\r\n    };\r\n          // Call the service to save the new event to the backend\r\n    this.dataService.AddSchedule(newEvent).subscribe((savedEvent) => {\r\n      // Push the saved event to the newEvents array\r\n      this.newEvents.push(savedEvent);\r\n            // Clear the input fields for the next event\r\n      this.clearData()\r\n    });*/\n  }\n  clearData() {\n    this.formData.delete(\"title\");\n    this.formData.delete(\"start_time\");\n    this.formData.delete(\"end_time\");\n    this.formData.delete(\"event\");\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n}\nAddScheduleComponent.ɵfac = function AddScheduleComponent_Factory(t) {\n  return new (t || AddScheduleComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar), i0.ɵɵdirectiveInject(i5.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n};\nAddScheduleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddScheduleComponent,\n  selectors: [[\"app-add-schedule\"]],\n  decls: 26,\n  vars: 2,\n  consts: [[\"mat-subheader\", \"\"], [\"mat-dialog-title\", \"\"], [\"mat-icon-button\", \"\", \"mat-dialog-close\", \"\", \"aria-label\", \"Close\", 1, \"close-button\", 2, \"margin-left\", \"1em\"], [\"mat-dialog-content\", \"\"], [3, \"formGroup\"], [\"matInput\", \"\", \"formControlName\", \"title\", \"placeholder\", \"Schedule Title\"], [\"formControlName\", \"event\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"appearance\", \"fill\"], [\"matInput\", \"\", \"formControlName\", \"description\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [3, \"value\"]],\n  template: function AddScheduleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n      i0.ɵɵtext(2, \"Add Schedule \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 2)(4, \"mat-icon\");\n      i0.ɵɵtext(5, \"close\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"div\", 3)(7, \"form\", 4)(8, \"mat-form-field\")(9, \"mat-label\");\n      i0.ɵɵtext(10, \"Title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"mat-form-field\")(13, \"mat-label\");\n      i0.ɵɵtext(14, \"Event\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"mat-select\", 6);\n      i0.ɵɵtemplate(16, AddScheduleComponent_mat_option_16_Template, 2, 2, \"mat-option\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"mat-form-field\", 8)(18, \"mat-label\");\n      i0.ɵɵtext(19, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 9);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(21, \"div\", 10)(22, \"button\", 11);\n      i0.ɵɵlistener(\"click\", function AddScheduleComponent_Template_button_click_22_listener() {\n        return ctx.onCancel();\n      });\n      i0.ɵɵtext(23, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"button\", 11);\n      i0.ɵɵlistener(\"click\", function AddScheduleComponent_Template_button_click_24_listener() {\n        return ctx.onSave();\n      });\n      i0.ɵɵtext(25, \"Save\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"formGroup\", ctx.scheduleform);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngForOf\", ctx.bookingevents);\n    }\n  },\n  dependencies: [i6.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i7.MatOption, i8.MatFormField, i8.MatLabel, i9.MatInput, i10.MatSelect, i11.MatListSubheaderCssMatStyler, i12.MatButton, i12.MatIconButton, i13.MatIcon, i5.MatDialogClose, i5.MatDialogTitle, i5.MatDialogContent, i5.MatDialogActions],\n  styles: [\"mat-dialog-content[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  mat-form-field[_ngcontent-%COMP%] {\\r\\n    margin-bottom: 20px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYm9va2luZy9zY2hlZHVsZS9hZGQtc2NoZWR1bGUvYWRkLXNjaGVkdWxlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOEJBQThCO0FBQzlCO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLG1CQUFtQjtFQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGV2ZW50LW1vZGFsLmNvbXBvbmVudC5jc3MgKi9cclxubWF0LWRpYWxvZy1jb250ZW50IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIH1cclxuICBcclxuICBtYXQtZm9ybS1maWVsZCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gIH1cclxuICBcclxuICBcclxuICBcclxuICBcclxuICBcclxuICBcclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["MAT_DIALOG_DATA","Validators","i0","AddScheduleComponent","constructor","dataService","fb","router","snackBar","dialogRef","data","FormData","group","title","required","start_time","end_time","event","description","ngOnInit","GetAllEvents","subscribe","result","eventsList","forEach","element","bookingevents","push","onSave","clearData","formData","delete","onCancel","close","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\schedule\\add-schedule\\add-schedule.component.ts","C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\schedule\\add-schedule\\add-schedule.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { DataService } from 'src/app/service/data.Service';\nimport { BookingEvent } from 'src/app/shared/bookingevent';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Schedule } from 'src/app/shared/schedule';\n\n\n\n\n@Component({\n  selector: 'app-add-schedule',\n  templateUrl: './add-schedule.component.html',\n  styleUrls: ['./add-schedule.component.css']\n})\n\nexport class AddScheduleComponent implements OnInit{\n\n  formData = new FormData();\n  bookingevents: BookingEvent[]=[];\n  newEvents: Event[] = [];\n  //event_name: string;\n  //date: Date;\n\n \n\n  constructor( private dataService: DataService, private fb: FormBuilder,private router: Router, \n    private snackBar: MatSnackBar,\n    public dialogRef: MatDialogRef<AddScheduleComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {\n    \n  }\n\n    scheduleform: FormGroup = this.fb.group({\n      title: ['', Validators.required],\n      start_time: [null, Validators.required],\n      end_time: [null, Validators.required],\n      event: [null, Validators.required],\n      description:['',Validators.required]\n    })\n\n    ngOnInit(): void {\n      this.GetAllEvents()\n    }\n\n  //Events method\n  GetAllEvents()\n  {\n    this.dataService.GetAllEvents().subscribe(result => {\n      let eventsList:any[] = result\n      eventsList.forEach((element) => {\n        this.bookingevents.push(element)\n        \n      });\n    })\n  }\n\n   onSave(): void {\n    //  if (this.scheduleform.valid) {\n    //      const eventData = this.scheduleform.value;\n         \n    //     // Add any additional logic (e.g., saving to backend) here if needed.\n    //  this.dialogRef.close(eventData);\n    //   }\n    /*const newEvent = {\n      title: this.event_name,\n      date: this.date\n    };\n\n    // Call the service to save the new event to the backend\n    this.dataService.AddSchedule(newEvent).subscribe((savedEvent) => {\n      // Push the saved event to the newEvents array\n      this.newEvents.push(savedEvent);\n\n      // Clear the input fields for the next event\n      this.clearData()\n    });*/\n    }\n\n\n  clearData(){\n    this.formData.delete(\"title\");\n    this.formData.delete(\"start_time\");\n    this.formData.delete(\"end_time\");\n    this.formData.delete(\"event\");\n   \n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","<div mat-subheader>\n  <h2 mat-dialog-title>Add Schedule </h2>\n<button style=\"margin-left: 1em;\" mat-icon-button mat-dialog-close class=\"close-button\" aria-label=\"Close\">\n  <mat-icon>close</mat-icon>\n</button>\n</div>\n\n<div mat-dialog-content>\n  <form [formGroup]=\"scheduleform\">\n    <mat-form-field>\n      <mat-label>Title</mat-label>\n      <input matInput formControlName=\"title\" placeholder=\"Schedule Title\">\n    </mat-form-field>\n\n    <mat-form-field>\n        <mat-label>Event</mat-label>\n        <mat-select formControlName=\"event\" >\n            <mat-option *ngFor=\"let item of bookingevents \" [value]=\"item.eventId\">{{item.event_Name}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <!-- <mat-form-field>\n      <mat-label>Start Time</mat-label>\n      <input matInput [matDatepicker]=\"startDatePicker\" formControlName=\"start_time\" placeholder=\"Start Time\">\n      <mat-datepicker-toggle matSuffix [for]=\"startDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #startDatePicker></mat-datepicker>\n    </mat-form-field>  -->\n    <!-- <mat-form-field>\n      <input matInput [matDatetimepicker]=\"startTimePicker\" [(ngModel)]=\"data.startTime\" placeholder=\"Start Time\" required>\n      <mat-datepicker-toggle matSuffix [for]=\"startTimePicker\"></mat-datepicker-toggle>\n      <mat-datetimepicker #startTimePicker></mat-datetimepicker>\n    </mat-form-field> -->\n\n    <!-- <mat-form-field>\n      <mat-label>End Time</mat-label>\n      <input matInput [matDatepicker]=\"endDatePicker\" formControlName=\"end_time\" placeholder=\"End Time\">\n      <mat-datepicker-toggle matSuffix [for]=\"endDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #endDatePicker></mat-datepicker>\n    </mat-form-field>  -->\n\n    <!-- <mat-form-field>\n      <input matInput [matDatetimepicker]=\"endTimePicker\" [(ngModel)]=\"data.endTime\" placeholder=\"End Time\" required>\n      <mat-datepicker-toggle matSuffix [for]=\"endTimePicker\"></mat-datepicker-toggle>\n      <mat-datetimepicker #endTimePicker></mat-datetimepicker>\n    </mat-form-field> -->\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Description</mat-label>\n      <input matInput formControlName=\"description\" />\n    </mat-form-field>\n    \n\n  </form>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onCancel()\">Cancel</button>\n  <button mat-button (click)=\"onSave()\">Save</button>\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}