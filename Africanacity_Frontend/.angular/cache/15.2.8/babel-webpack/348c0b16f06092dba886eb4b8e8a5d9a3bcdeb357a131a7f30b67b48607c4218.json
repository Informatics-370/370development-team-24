{"ast":null,"code":"import { ViewContainerRef } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MenuTypes } from 'src/app/shared/menu-types';\nimport { ConfirmationDialogComponent } from './confirmation-dialog/confirmation-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/data.Service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/material/snack-bar\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"../../../navbar/navbar.component\";\nconst _c0 = [\"toastContainer\"];\nconst _c1 = function (a1) {\n  return {\n    \"form-control\": true,\n    \"is-invalid\": a1\n  };\n};\nconst _c2 = function () {\n  return [\"/menu-types\"];\n};\nexport let AddMenuTypeComponent = /*#__PURE__*/(() => {\n  class AddMenuTypeComponent {\n    constructor(dataService, route, router, fb, dialog, snackBar) {\n      this.dataService = dataService;\n      this.route = route;\n      this.router = router;\n      this.fb = fb;\n      this.dialog = dialog;\n      this.snackBar = snackBar;\n      this.menu_typeId = 0;\n      //creating a form\n      this.addMenuTypeForm = this.fb.group({\n        menu_typeId: [0, [Validators.required]],\n        name: ['', [Validators.required]]\n      });\n    }\n    //confirmation dialog method\n    openDialog() {\n      const dialogRef = this.dialog.open(ConfirmationDialogComponent, {\n        width: '250px',\n        data: 'Add New Menu Type?'\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result == 'Yes') {\n          this.addNewMenuType();\n        }\n      });\n    }\n    /*openDialog(enterAnimationDuration: string, exitAnimationDuration: string): void {\r\n     this.dialog.open(CreateConfirmationDialog, {\r\n       width: '25%',\r\n       enterAnimationDuration,\r\n       exitAnimationDuration,\r\n     });\r\n    }*/\n    ngOnInit() {}\n    //code to add a new mmenu type\n    addNewMenuType() {\n      let menuType = new MenuTypes();\n      menuType.name = this.addMenuTypeForm.value.name;\n      this.dataService.AddMenuType(menuType).subscribe(add => {\n        this.router.navigate(['/menu-types']);\n      });\n      this.showSuccessMessage('Menu Type added successfully!');\n    }\n    //success message\n    showSuccessMessage(message) {\n      const snackBarRef = this.snackBar.open(message, 'Ok', {\n        duration: 3000,\n        horizontalPosition: 'center',\n        verticalPosition: 'bottom'\n      });\n      snackBarRef.afterDismissed().subscribe(() => {\n        this.toastContainer.clear();\n      });\n    }\n  }\n  AddMenuTypeComponent.ɵfac = function AddMenuTypeComponent_Factory(t) {\n    return new (t || AddMenuTypeComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.MatDialog), i0.ɵɵdirectiveInject(i5.MatSnackBar));\n  };\n  AddMenuTypeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddMenuTypeComponent,\n    selectors: [[\"app-add-menu-type\"]],\n    viewQuery: function AddMenuTypeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5, ViewContainerRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toastContainer = _t.first);\n      }\n    },\n    decls: 26,\n    vars: 11,\n    consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-10\", \"order-md-1\"], [2, \"text-align\", \"center\", \"font-family\", \"'Times New Roman', Times, serif\", \"font-size\", \"50px\"], [1, \"container-md\"], [\"autocomplete\", \"off\", 3, \"formGroup\"], [\"for\", \"name\", 1, \"form-label\", 2, \"font-weight\", \"bold\"], [1, \"input-group\", \"has-validation\"], [\"type\", \"text\", \"id\", \"name\", \"name\", \"name\", \"formControlName\", \"name\", \"placeholder\", \"Name\", 3, \"ngClass\"], [\"name\", \"\"], [1, \"invalid-feedback\"], [\"role\", \"group\", \"aria-label\", \"Basic example\", 1, \"btn-group\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", 3, \"routerLink\"], [1, \"toast-container\"]],\n    template: function AddMenuTypeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"app-navbar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"h1\", 4);\n        i0.ɵɵtext(6, \"Add Menu Types\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"form\", 6)(9, \"label\", 7);\n        i0.ɵɵtext(10, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 8);\n        i0.ɵɵelement(12, \"input\", 9, 10);\n        i0.ɵɵelementStart(14, \"div\", 11);\n        i0.ɵɵtext(15, \" This field is required. \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 12)(17, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function AddMenuTypeComponent_Template_button_click_17_listener() {\n          return ctx.openDialog();\n        });\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"br\")(20, \"br\");\n        i0.ɵɵelementStart(21, \"button\", 14);\n        i0.ɵɵtext(22, \"Cancel \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtext(23);\n        i0.ɵɵpipe(24, \"json\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(25, \"div\", 15);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"formGroup\", ctx.addMenuTypeForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c1, ((tmp_1_0 = ctx.addMenuTypeForm.get(\"name\")) == null ? null : tmp_1_0.invalid) && (((tmp_1_0 = ctx.addMenuTypeForm.get(\"name\")) == null ? null : tmp_1_0.dirty) || ((tmp_1_0 = ctx.addMenuTypeForm.get(\"name\")) == null ? null : tmp_1_0.touched))));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"disabled\", ctx.addMenuTypeForm.invalid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.menu_typeId == 0 || ctx.menu_typeId == null ? \"Add\" : \"Update\", \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(10, _c2));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(24, 6, ctx.addMenuTypeForm.value), \" \");\n      }\n    },\n    dependencies: [i6.NgClass, i2.RouterLink, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName, i7.NavbarComponent, i6.JsonPipe],\n    styles: [\".toast-container[_ngcontent-%COMP%]{position:fixed;bottom:20px;left:50%;transform:translate(-50%)}\"]\n  });\n  return AddMenuTypeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}