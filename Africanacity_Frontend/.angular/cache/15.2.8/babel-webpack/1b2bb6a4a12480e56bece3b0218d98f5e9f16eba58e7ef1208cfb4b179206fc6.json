{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/data.Service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/material/dialog\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/material/datepicker\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/button\";\nimport * as i13 from \"@angular/material/icon\";\nfunction AddScheduleComponent_mat_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", item_r3.eventId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r3.event_Name);\n  }\n}\nexport class AddScheduleComponent {\n  constructor(dataService, fb, router, snackBar, dialogRef, data) {\n    this.dataService = dataService;\n    this.fb = fb;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.formData = new FormData();\n    this.bookingevents = [];\n    // this.scheduleform = new FormGroup({\n    //   title: new FormControl('', [Validators.required]),\n    //   start_time: new FormControl('', [Validators.required]),\n    //   end_time: new FormControl('', [Validators.required]),\n    //   event_name:  new FormControl('', [Validators.required]),\n    // });\n    this.scheduleform = this.fb.group({\n      title: ['', Validators.required],\n      start_time: ['', Validators.required],\n      end_time: ['', Validators.required],\n      event: [null, Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.GetAllEvents();\n  }\n  //Events method\n  GetAllEvents() {\n    this.dataService.GetAllEvents().subscribe(result => {\n      let eventsList = result;\n      eventsList.forEach(element => {\n        this.bookingevents.push(element);\n      });\n    });\n  }\n  onSave() {\n    if (this.scheduleform.valid) {\n      const eventData = this.scheduleform.value;\n      // Add any additional logic (e.g., saving to backend) here if needed.\n      this.dialogRef.close(eventData);\n    }\n  }\n  clearData() {\n    this.formData.delete(\"title\");\n    this.formData.delete(\"start_time\");\n    this.formData.delete(\"end_time\");\n    this.formData.delete(\"event\");\n  }\n  onCancel() {\n    this.dialogRef.close();\n  }\n}\nAddScheduleComponent.ɵfac = function AddScheduleComponent_Factory(t) {\n  return new (t || AddScheduleComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar), i0.ɵɵdirectiveInject(i5.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n};\nAddScheduleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddScheduleComponent,\n  selectors: [[\"app-add-schedule\"]],\n  decls: 35,\n  vars: 6,\n  consts: [[\"mat-dialog-title\", \"\"], [\"mat-icon-button\", \"\", \"mat-dialog-close\", \"\", \"aria-label\", \"Close\", 1, \"close-button\"], [\"mat-dialog-content\", \"\"], [3, \"formGroup\"], [\"matInput\", \"\", \"formControlName\", \"title\", \"placeholder\", \"Schedule Title\"], [\"formControlName\", \"event_name\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"formControlName\", \"start\", \"placeholder\", \"Start Time\", 3, \"matDatepicker\"], [\"matSuffix\", \"\", 3, \"for\"], [\"startDatePicker\", \"\"], [\"matInput\", \"\", \"formControlName\", \"end\", \"placeholder\", \"End Time\", 3, \"matDatepicker\"], [\"endDatePicker\", \"\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [3, \"value\"]],\n  template: function AddScheduleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\", 0);\n      i0.ɵɵtext(1, \"Add Schedule \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"button\", 1)(3, \"mat-icon\");\n      i0.ɵɵtext(4, \"close\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 2)(6, \"form\", 3)(7, \"mat-form-field\")(8, \"mat-label\");\n      i0.ɵɵtext(9, \"Title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"mat-form-field\")(12, \"mat-label\");\n      i0.ɵɵtext(13, \"Event\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"mat-select\", 5);\n      i0.ɵɵtemplate(15, AddScheduleComponent_mat_option_15_Template, 2, 2, \"mat-option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"mat-form-field\")(17, \"mat-label\");\n      i0.ɵɵtext(18, \"Start Time\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 7)(20, \"mat-datepicker-toggle\", 8)(21, \"mat-datepicker\", null, 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"mat-form-field\")(24, \"mat-label\");\n      i0.ɵɵtext(25, \"End Time\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(26, \"input\", 10)(27, \"mat-datepicker-toggle\", 8)(28, \"mat-datepicker\", null, 11);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(30, \"div\", 12)(31, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function AddScheduleComponent_Template_button_click_31_listener() {\n        return ctx.onCancel();\n      });\n      i0.ɵɵtext(32, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function AddScheduleComponent_Template_button_click_33_listener() {\n        return ctx.onSave();\n      });\n      i0.ɵɵtext(34, \"Save\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r1 = i0.ɵɵreference(22);\n      const _r2 = i0.ɵɵreference(29);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formGroup\", ctx.scheduleform);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngForOf\", ctx.bookingevents);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matDatepicker\", _r1);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"for\", _r1);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"matDatepicker\", _r2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"for\", _r2);\n    }\n  },\n  dependencies: [i6.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i7.MatOption, i8.MatDatepicker, i8.MatDatepickerInput, i8.MatDatepickerToggle, i9.MatFormField, i9.MatLabel, i9.MatSuffix, i10.MatInput, i11.MatSelect, i12.MatButton, i12.MatIconButton, i13.MatIcon, i5.MatDialogClose, i5.MatDialogTitle, i5.MatDialogContent, i5.MatDialogActions],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["MAT_DIALOG_DATA","Validators","i0","AddScheduleComponent","constructor","dataService","fb","router","snackBar","dialogRef","data","FormData","group","title","required","start_time","end_time","event","ngOnInit","GetAllEvents","subscribe","result","eventsList","forEach","element","bookingevents","push","onSave","scheduleform","valid","eventData","value","close","clearData","formData","delete","onCancel","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\schedule\\add-schedule\\add-schedule.component.ts","C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\schedule\\add-schedule\\add-schedule.component.html"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { DataService } from 'src/app/service/data.Service';\nimport { BookingEvent } from 'src/app/shared/bookingevent';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n\n\n@Component({\n  selector: 'app-add-schedule',\n  templateUrl: './add-schedule.component.html',\n  styleUrls: ['./add-schedule.component.css']\n})\n\nexport class AddScheduleComponent implements OnInit{\n\n  formData = new FormData();\n  bookingevents: BookingEvent[]=[]\n \n\n  constructor( private dataService: DataService, private fb: FormBuilder,private router: Router, private snackBar: MatSnackBar,\n    public dialogRef: MatDialogRef<AddScheduleComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {}\n    // this.scheduleform = new FormGroup({\n    //   title: new FormControl('', [Validators.required]),\n    //   start_time: new FormControl('', [Validators.required]),\n    //   end_time: new FormControl('', [Validators.required]),\n    //   event_name:  new FormControl('', [Validators.required]),\n    // });\n  \n    scheduleform: FormGroup = this.fb.group({\n      title: ['', Validators.required],\n      start_time: ['', Validators.required],\n      end_time: ['', Validators.required],\n      event: [null, Validators.required],\n    })\n\n    ngOnInit(): void {\n      this.GetAllEvents()\n    }\n\n  //Events method\n  GetAllEvents()\n  {\n    this.dataService.GetAllEvents().subscribe(result => {\n      let eventsList:any[] = result\n      eventsList.forEach((element) => {\n        this.bookingevents.push(element)\n        \n      });\n    })\n  }\n\n   onSave(): void {\n     if (this.scheduleform.valid) {\n         const eventData = this.scheduleform.value;\n         \n        // Add any additional logic (e.g., saving to backend) here if needed.\n     this.dialogRef.close(eventData);\n      }\n    }\n\n\n  clearData(){\n    this.formData.delete(\"title\");\n    this.formData.delete(\"start_time\");\n    this.formData.delete(\"end_time\");\n    this.formData.delete(\"event\");\n   \n  }\n\n  onCancel(): void {\n    this.dialogRef.close();\n  }\n}\n","<h2 mat-dialog-title>Add Schedule </h2>\n<button mat-icon-button mat-dialog-close class=\"close-button\" aria-label=\"Close\">\n  <mat-icon>close</mat-icon>\n</button>\n\n<div mat-dialog-content>\n  <form [formGroup]=\"scheduleform\">\n    <mat-form-field>\n      <mat-label>Title</mat-label>\n      <input matInput formControlName=\"title\" placeholder=\"Schedule Title\">\n      <!-- <mat-error *ngIf=\"scheduleform.get('title').invalid\">Title is required</mat-error> -->\n    </mat-form-field>\n\n    <mat-form-field>\n        <mat-label>Event</mat-label>\n        <mat-select formControlName=\"event_name\" >\n            <mat-option *ngFor=\"let item of bookingevents \"  [value]=\"item.eventId\">{{item.event_Name}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>Start Time</mat-label>\n      <input matInput [matDatepicker]=\"startDatePicker\" formControlName=\"start\" placeholder=\"Start Time\">\n      <mat-datepicker-toggle matSuffix [for]=\"startDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #startDatePicker></mat-datepicker>\n      <!-- <mat-error *ngIf=\"scheduleform.get('start').invalid\">Start time is required</mat-error> -->\n    </mat-form-field>\n\n    <mat-form-field>\n      <mat-label>End Time</mat-label>\n      <input matInput [matDatepicker]=\"endDatePicker\" formControlName=\"end\" placeholder=\"End Time\">\n      <mat-datepicker-toggle matSuffix [for]=\"endDatePicker\"></mat-datepicker-toggle>\n      <mat-datepicker #endDatePicker></mat-datepicker>\n    </mat-form-field>\n  </form>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onCancel()\">Cancel</button>\n  <button mat-button (click)=\"onSave()\">Save</button>\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}