{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/inventory.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/common/http\";\nexport class StocktakeComponent {\n  constructor(route, inventoryservice, snackBar, httpClient) {\n    this.route = route;\n    this.inventoryservice = inventoryservice;\n    this.snackBar = snackBar;\n    this.httpClient = httpClient;\n    this.inventoryItems = [];\n    this.selectedType = null;\n    this.predefinedLevel = 5;\n  }\n  //  cancel(){\n  //    this.router.navigate(['/home'])\n  //  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.typeId = +params['typeId'];\n      if (this.typeId) {\n        this.GetInventoryItemsByType(this.typeId);\n      }\n    });\n  }\n  GetInventoryItemsByType(typeId) {\n    this.inventoryservice.GetInventoryItemsByType(typeId).subscribe(items => {\n      this.inventoryItems = items;\n    }, error => {\n      console.error('Failed to fetch inventory items:', error);\n    });\n  }\n  updateQuantityOnServer(inventoryItem) {\n    this.inventoryservice.UpdateInventoryItem(inventoryItem.inventory_ItemId, inventoryItem).subscribe(() => {\n      console.log('Inventory item updated successfully.'); // Success message or additional logic if needed\n      this.updateInventoryItemInArray(inventoryItem); // Update the item in the array\n    }, error => {\n      console.error('Failed to update inventory item:', error);\n    });\n  }\n  updateInventoryItemInArray(updatedItem) {\n    const index = this.inventoryItems.findIndex(item => item.inventory_ItemId === updatedItem.inventory_ItemId);\n    if (index !== -1) {\n      this.inventoryItems[index] = {\n        ...updatedItem\n      }; // Replace the item in the array\n    }\n  }\n\n  applyFilter(event) {\n    const filterValue = event.target.value.toLowerCase();\n    this.inventoryItems = this.inventoryItems.filter(inventoryitem => {\n      const column2Value = inventoryitem.itemName.toLowerCase() || inventoryitem.itemName.toUpperCase();\n      const column3Value = inventoryitem.description.toLowerCase();\n      return column2Value.includes(filterValue) || column3Value.includes(filterValue);\n    });\n  }\n}\nStocktakeComponent.ɵfac = function StocktakeComponent_Factory(t) {\n  return new (t || StocktakeComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.InventoryService), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.HttpClient));\n};\nStocktakeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: StocktakeComponent,\n  selectors: [[\"app-stocktake\"]],\n  decls: 2,\n  vars: 0,\n  template: function StocktakeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"stocktake works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;AAaA,OAAM,MAAOA,kBAAkB;EAQ7BC,YACUC,KAAqB,EACrBC,gBAAkC,EAClCC,QAAqB,EACrBC,UAAsB;IAHtB,UAAK,GAALH,KAAK;IACL,qBAAgB,GAAhBC,gBAAgB;IAChB,aAAQ,GAARC,QAAQ;IACR,eAAU,GAAVC,UAAU;IAVpB,mBAAc,GAAoB,EAAE;IACpC,iBAAY,GAAyB,IAAI;IAEzC,oBAAe,GAAW,CAAC;EAQxB;EAID;EACA;EACA;EAEFC,QAAQ;IACN,IAAI,CAACJ,KAAK,CAACK,MAAM,CAACC,SAAS,CAACD,MAAM,IAAG;MACnC,IAAI,CAACE,MAAM,GAAG,CAACF,MAAM,CAAC,QAAQ,CAAC;MAC/B,IAAI,IAAI,CAACE,MAAM,EAAE;QACf,IAAI,CAACC,uBAAuB,CAAC,IAAI,CAACD,MAAM,CAAC;;IAE7C,CAAC,CAAC;EACJ;EAEAC,uBAAuB,CAACD,MAAc;IACpC,IAAI,CAACN,gBAAgB,CAACO,uBAAuB,CAACD,MAAM,CAAC,CAACD,SAAS,CAC5DG,KAAK,IAAI;MACR,IAAI,CAACC,cAAc,GAAGD,KAAK;IAC7B,CAAC,EACAE,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D,CAAC,CACF;EACH;EAEAE,sBAAsB,CAACC,aAA4B;IACjD,IAAI,CAACb,gBAAgB,CAACc,mBAAmB,CAACD,aAAa,CAACE,gBAAgB,EAAEF,aAAa,CAAC,CAACR,SAAS,CAChG,MAAK;MACHM,OAAO,CAACK,GAAG,CAAC,sCAAsC,CAAC,CAAC,CAAC;MACrD,IAAI,CAACC,0BAA0B,CAACJ,aAAa,CAAC,CAAC,CAAC;IAClD,CAAC,EACAH,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D,CAAC,CACF;EACH;EAEAO,0BAA0B,CAACC,WAA0B;IACnD,MAAMC,KAAK,GAAG,IAAI,CAACV,cAAc,CAACW,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACN,gBAAgB,KAAKG,WAAW,CAACH,gBAAgB,CAAC;IAC7G,IAAII,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACV,cAAc,CAACU,KAAK,CAAC,GAAG;QAAE,GAAGD;MAAW,CAAE,CAAC,CAAC;;EAErD;;EAKAI,WAAW,CAACC,KAAY;IACtB,MAAMC,WAAW,GAAID,KAAK,CAACE,MAA2B,CAACC,KAAK,CAACC,WAAW,EAAE;IAE1E,IAAI,CAAClB,cAAc,GAAG,IAAI,CAACA,cAAc,CAACmB,MAAM,CAACC,aAAa,IAAG;MAC/D,MAAMC,YAAY,GAAGD,aAAa,CAACE,QAAQ,CAACJ,WAAW,EAAE,IAAIE,aAAa,CAACE,QAAQ,CAACC,WAAW,EAAE;MACjG,MAAMC,YAAY,GAAGJ,aAAa,CAACK,WAAW,CAACP,WAAW,EAAE;MAE5D,OAAOG,YAAY,CAACK,QAAQ,CAACX,WAAW,CAAC,IAAIS,YAAY,CAACE,QAAQ,CAACX,WAAW,CAAC;IACjF,CAAC,CAAC;EACJ;;AAxEW3B,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAuC;EAAAC;EAAAC;EAAAC;IAAA;MCb/BC,yBAAG;MAAAA,gCAAgB;MAAAA,iBAAI","names":["StocktakeComponent","constructor","route","inventoryservice","snackBar","httpClient","ngOnInit","params","subscribe","typeId","GetInventoryItemsByType","items","inventoryItems","error","console","updateQuantityOnServer","inventoryItem","UpdateInventoryItem","inventory_ItemId","log","updateInventoryItemInArray","updatedItem","index","findIndex","item","applyFilter","event","filterValue","target","value","toLowerCase","filter","inventoryitem","column2Value","itemName","toUpperCase","column3Value","description","includes","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Inventory Management\\Inventory Items\\stocktake\\stocktake.component.ts","C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Inventory Management\\Inventory Items\\stocktake\\stocktake.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute } from '@angular/router';\nimport { InventoryService } from 'src/app/service/inventory.service';\nimport { InventoryItem } from 'src/app/shared/inventoryitem';\nimport { InventoryType } from 'src/app/shared/inventorytype';\n\n@Component({\n  selector: 'app-stocktake',\n  templateUrl: './stocktake.component.html',\n  styleUrls: ['./stocktake.component.css']\n})\nexport class StocktakeComponent {\n  typeId?: number;\n  inventoryItems: InventoryItem[] = [];\n  selectedType: InventoryType | null = null;\n  inventoryitem?: number;\n  predefinedLevel: number = 5;\n\n\n  constructor(\n    private route: ActivatedRoute,\n    private inventoryservice: InventoryService,\n    private snackBar: MatSnackBar,\n    private httpClient: HttpClient\n  ) {}\n\n\n    \n    //  cancel(){\n    //    this.router.navigate(['/home'])\n    //  }\n\n  ngOnInit(): void {\n    this.route.params.subscribe(params => {\n      this.typeId = +params['typeId'];\n      if (this.typeId) {\n        this.GetInventoryItemsByType(this.typeId);\n      }\n    });\n  }\n\n  GetInventoryItemsByType(typeId: number): void {\n    this.inventoryservice.GetInventoryItemsByType(typeId).subscribe(\n      (items) => {\n        this.inventoryItems = items;\n      },\n      (error) => {\n        console.error('Failed to fetch inventory items:', error);\n      }\n    );\n  }\n  \n  updateQuantityOnServer(inventoryItem: InventoryItem) {\n    this.inventoryservice.UpdateInventoryItem(inventoryItem.inventory_ItemId, inventoryItem).subscribe(\n      () => {\n        console.log('Inventory item updated successfully.'); // Success message or additional logic if needed\n        this.updateInventoryItemInArray(inventoryItem); // Update the item in the array\n      },\n      (error: any) => {\n        console.error('Failed to update inventory item:', error);\n      }\n    );\n  }\n\n  updateInventoryItemInArray(updatedItem: InventoryItem) {\n    const index = this.inventoryItems.findIndex((item) => item.inventory_ItemId === updatedItem.inventory_ItemId);\n    if (index !== -1) {\n      this.inventoryItems[index] = { ...updatedItem }; // Replace the item in the array\n    }\n  }\n\n  \n  \n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value.toLowerCase();\n  \n    this.inventoryItems = this.inventoryItems.filter(inventoryitem => {\n      const column2Value = inventoryitem.itemName.toLowerCase() || inventoryitem.itemName.toUpperCase();\n      const column3Value = inventoryitem.description.toLowerCase();\n  \n      return column2Value.includes(filterValue) || column3Value.includes(filterValue);\n    });\n  }\n\n}\n","<p>stocktake works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}