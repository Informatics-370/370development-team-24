{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Event } from 'src/app/shared/event';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/data.Service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../../../navbar/navbar.component\";\nexport class EditEventComponent {\n  constructor(dataService, router, activated, snackBar) {\n    this.dataService = dataService;\n    this.router = router;\n    this.activated = activated;\n    this.snackBar = snackBar;\n    this.editEvents = new Event();\n    this.updateEventsForm = new FormGroup({\n      event_Name: new FormControl('', [Validators.required]),\n      description: new FormControl('', [Validators.required])\n    });\n  }\n  ngOnInit() {\n    this.activated.params.subscribe(params => {\n      this.dataService.GetEvent(params['id']).subscribe(result => {\n        this.editEvents = result;\n        this.updateEventsForm.controls['event_Name'].setValue(this.editEvents.event_Name);\n        this.updateEventsForm.controls['description'].setValue(this.editEvents.description);\n      });\n    });\n  }\n  cancel() {\n    this.router.navigate(['/view-events']);\n  }\n  updateEvent() {\n    let event = new Event();\n    event.event_Name = this.updateEventsForm.value.event_name;\n    event.description = this.updateEventsForm.value.description;\n    this.dataService.EditEvent(this.editEvents.eventId, event).subscribe(response => {\n      if (response.statusCode === 200) {\n        this.router.navigate(['./view-events']);\n        window.location.reload();\n        this.showSuccessMessage('Event Details updated successfully!');\n      } else {\n        // Handle error if needed\n      }\n    }, error => {\n      // Handle error if needed\n    });\n  }\n  showSuccessMessage(message) {\n    const snackBarRef = this.snackBar.open(message, 'Ok', {\n      duration: 3000,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom'\n    });\n  }\n}\nEditEventComponent.ɵfac = function EditEventComponent_Factory(t) {\n  return new (t || EditEventComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.MatSnackBar));\n};\nEditEventComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditEventComponent,\n  selectors: [[\"app-edit-event\"]],\n  decls: 28,\n  vars: 4,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-10\", \"order-md-1\"], [2, \"text-align\", \"center\", \"font-family\", \"'Times New Roman', Times, serif\", \"font-size\", \"50px\"], [1, \"container\"], [1, \"form-horizontal\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"event_name\", 1, \"col-sm-1\", 2, \"font-weight\", \"bold\"], [1, \"col-sm-6\"], [\"id\", \"event_name\", \"placeholder\", \"Enter event title\", \"formControlName\", \"event_name\", 1, \"form-control\", 3, \"required\"], [\"for\", \"description\", 1, \"col-sm-1\", 2, \"font-weight\", \"bold\"], [\"type\", \"text\", \"id\", \"description\", \"placeholder\", \"Enter description\", \"formControlName\", \"description\", 1, \"form-control\", 3, \"required\"], [1, \"col-sm-offset-1\", \"col-sm-6\"], [\"type\", \"submit\", 1, \"btn\", \"btn-sm\", \"btn-success\", 2, \"margin-right\", \"1em\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-danger\", 3, \"click\"]],\n  template: function EditEventComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"app-navbar\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"h4\", 4);\n      i0.ɵɵtext(6, \"Update Event\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"hr\");\n      i0.ɵɵelementStart(8, \"div\", 5)(9, \"div\", 1)(10, \"form\", 6);\n      i0.ɵɵlistener(\"ngSubmit\", function EditEventComponent_Template_form_ngSubmit_10_listener() {\n        return ctx.updateEvent();\n      });\n      i0.ɵɵelementStart(11, \"div\", 7)(12, \"label\", 8);\n      i0.ɵɵtext(13, \"Event Title:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 9);\n      i0.ɵɵelement(15, \"input\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 7)(17, \"label\", 11);\n      i0.ɵɵtext(18, \"Description:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 9);\n      i0.ɵɵelement(20, \"textarea\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(21, \"br\");\n      i0.ɵɵelementStart(22, \"div\", 7)(23, \"div\", 13)(24, \"button\", 14);\n      i0.ɵɵlistener(\"click\", function EditEventComponent_Template_button_click_24_listener() {\n        return ctx.updateEvent;\n      });\n      i0.ɵɵtext(25, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"button\", 15);\n      i0.ɵɵlistener(\"click\", function EditEventComponent_Template_button_click_26_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(27, \"Discard\");\n      i0.ɵɵelementEnd()()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"formGroup\", ctx.updateEventsForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"required\", true);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"required\", true);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", !ctx.updateEventsForm.valid);\n    }\n  },\n  dependencies: [i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.FormGroupDirective, i4.FormControlName, i5.NavbarComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","Event","EditEventComponent","constructor","dataService","router","activated","snackBar","event_Name","required","description","ngOnInit","params","subscribe","GetEvent","result","editEvents","updateEventsForm","controls","setValue","cancel","navigate","updateEvent","event","value","event_name","EditEvent","eventId","response","statusCode","window","location","reload","showSuccessMessage","error","message","snackBarRef","open","duration","horizontalPosition","verticalPosition","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\events\\edit-event\\edit-event.component.ts","C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\events\\edit-event\\edit-event.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { DataService } from 'src/app/service/data.Service';\nimport { Event } from 'src/app/shared/event';\n\n@Component({\n  selector: 'app-edit-event',\n  templateUrl: './edit-event.component.html',\n  styleUrls: ['./edit-event.component.css']\n})\nexport class EditEventComponent implements OnInit {\n\n  constructor(private dataService: DataService, \n    private router: Router, \n    private activated:ActivatedRoute,\n    private snackBar: MatSnackBar){}\n\n   editEvents: Event = new Event();\n\n   updateEventsForm: FormGroup = new FormGroup({\n    event_Name: new FormControl('',[Validators.required]),\n    description: new FormControl('',[Validators.required])\n })\n\n    ngOnInit(): void{\n      this.activated.params.subscribe(params =>{\n        this.dataService.GetEvent(params['id']).subscribe(result =>{\n          this.editEvents = result as Event;\n          this.updateEventsForm.controls['event_Name'].setValue(this.editEvents.event_Name);\n          this.updateEventsForm.controls['description'].setValue(this.editEvents.description);\n        })\n      })\n    }\n\n    cancel(){\n      this.router.navigate(['/view-events'])\n    }\n\n    updateEvent(){\n      let event = new Event();\n      event.event_Name = this.updateEventsForm.value.event_name;\n      event.description = this.updateEventsForm.value.description;\n  \n      this.dataService.EditEvent(this.editEvents.eventId,event).subscribe((response:any) => {\n  \n        if (response.statusCode === 200) {\n          this.router.navigate(['./view-events']);\n          window.location.reload();\n          this.showSuccessMessage('Event Details updated successfully!');\n        } else {\n          // Handle error if needed\n        }\n      },\n      (error) => {\n        // Handle error if needed\n      }\n      );\n      \n    }\n\n    showSuccessMessage(message: string): void {\n      const snackBarRef: MatSnackBarRef<any> = this.snackBar.open(message, 'Ok', {\n        duration: 3000, // Duration in milliseconds\n        horizontalPosition: 'center',\n        verticalPosition: 'bottom'\n      });\n    }\n\n\n\n\n}\n","<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-md-2\">\n        <app-navbar></app-navbar>\n    </div>\n    <div class=\"col-md-10 order-md-1\">\n       <h4 style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 50px;\">Update Event</h4>\n       <hr>\n       <div class=\"container\">\n         <div class=\"row\">\n            <form [formGroup]=\"updateEventsForm\" class=\"form-horizontal\"  (ngSubmit)=\"updateEvent()\">\n                <div class=\"form-group\">\n                    <label class=\" col-sm-1\" style=\"font-weight: bold;\" for=\"event_name\">Event Title:</label>\n                    <div class=\"col-sm-6\">\n                      <input class=\"form-control\" id=\"event_name\" placeholder=\"Enter event title\" [required]=\"true\" formControlName=\"event_name\">\n                    </div>\n                </div>\n\n                <div class=\"form-group\">\n                    <label class=\"col-sm-1\" style=\"font-weight: bold;\" for=\"description\">Description:</label>\n                    <div class=\"col-sm-6\">\n                      <textarea class=\"form-control\" type=\"text\" id=\"description\" placeholder=\"Enter description\" [required]=\"true\" formControlName=\"description\"></textarea>\n                    </div>\n                </div>\n                <br>\n\n                <div class=\"form-group\">\n                    <div class=\"col-sm-offset-1 col-sm-6\">\n                      <button style=\"margin-right:1em;\" type=\"submit\" [disabled]=\"!updateEventsForm.valid\" class=\"btn btn-sm btn-success\" (click)=\"updateEvent\">Save</button>\n                      <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"cancel()\">Discard</button>\n                    </div>\n                </div>\n            </form>\n         </div>\n       </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}