{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/data.Service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/material/snack-bar\";\nfunction MenuitemsComponent_tr_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\")(14, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function MenuitemsComponent_tr_19_Template_button_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const menuItem_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deleteMenuItem(menuItem_r1.menuItem_Id));\n    });\n    i0.ɵɵtext(15, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const menuItem_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.menuItem_Id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.foodTypeName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.menuTypeName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.menuCategoryName);\n  }\n}\nexport class MenuitemsComponent {\n  constructor(dataService, router, http, snackBar) {\n    this.dataService = dataService;\n    this.router = router;\n    this.http = http;\n    this.snackBar = snackBar;\n    this.menuItems = [];\n  }\n  ngOnInit() {\n    this.GetAllMenuItems();\n    console.log(this.menuItems);\n  }\n  /*************************** MENU ITEM ************/\n  /**Get all menu items** */\n  GetAllMenuItems() {\n    this.dataService.GetAllMenuItems().subscribe(menuItems => {\n      this.menuItems = menuItems;\n      // this.loadAssociatedNames();\n    }, error => {\n      console.error(error);\n    });\n  }\n  /*GetAllMenuItems() {\r\n    this.dataService.GetAllMenuItems().subscribe(result => {\r\n      let menuItemList:any[] = result\r\n      menuItemList.forEach((element) => {\r\n        this.menuItems.push(element);\r\n        \r\n        \r\n      });\r\n    })\r\n  }*/\n  /*GetAllMenuItems(): void {\r\n    this.http.get<MenuItem[]>('/MenuItems/GetAllMenuItems').subscribe(\r\n      (response) => {\r\n        this.menuItems = response;\r\n        this.loadAssociatedNames();\r\n      },\r\n      (error) => {\r\n        console.error('Failed to fetch menu items:', error);\r\n      }\r\n    );\r\n  }*/\n  // loadAssociatedNames(): void {\n  //   for (const menuItem of this.menuItems) {\n  //     this.getFoodTypeName(menuItem.foodTypeId);\n  //     this.getMenuItemCategoryName(menuItem.menuItemCategory_Id);\n  //     this.getFoodTypeName(menuItem.menu_TypeId);\n  //   }\n  // }\n  /*loadMenuTypeName(menuItem: MenuTypes): void {\r\n    this.http.get<any>(`api/MenuType/GetAllMenuTypes${menuItem.name}`).subscribe(\r\n      (response) => {\r\n        menuItem.name = response.name;\r\n      },\r\n      (error) => {\r\n        console.error('Failed to fetch menu type name:', error);\r\n      }\r\n    );\r\n  }*/\n  // getFoodTypeName(foodTypeId: number): void {\n  //   this.dataService.GetFoodTypeById(foodTypeId).subscribe(\n  //     (foodType) => {\n  //       const foundFoodType = this.foodTypes.find((ft) => ft.foodTypeId == foodType.foodTypeId);\n  //       if (foundFoodType) {\n  //         foundFoodType.name = foodType.name;\n  //       } else {\n  //         this.foodTypes.push(foodType);\n  //       }\n  //     },\n  //     (error) => {\n  //       console.error('Failed to fetch food type name:', error);\n  //     }\n  //   );\n  // }\n  // getMenuItemCategoryName(categoryId: number): void {\n  //   this.dataService.GetMenuItemCategoryById(categoryId).subscribe(\n  //     (menuItemCategory) => {\n  //       const foundCategory = this.menuCategories.find((mc) => mc.MenuItemCategoryId == menuItemCategory.category_Id);\n  //       if (foundCategory) {\n  //         foundCategory.name = menuItemCategory.name;\n  //       } else {\n  //         this.menuCategories.push(menuItemCategory);\n  //       }\n  //     },\n  //     (error) => {\n  //       console.error('Failed to fetch menu category name:', error);\n  //     }\n  //   );\n  // }\n  // getMenuTypeName(menuTypeId: number): void {\n  //   this.dataService.GetMenuTypeById(menuTypeId).subscribe(\n  //     (menuType) => {\n  //       const foundMenuType = this.menuTypes.find((mt) => mt.menu_TypeId == menuType.menu_TypeId);\n  //       if (foundMenuType) {\n  //         foundMenuType.name = menuType.name;\n  //       } else {\n  //         this.menuTypes.push(menuType);\n  //       }\n  //     },\n  //     (error) => {\n  //       console.error('Failed to fetch menu type name:', error);\n  //     }\n  //   );\n  // }\n  deleteItem() {\n    const confirmationSnackBar = this.snackBar.open('Are you sure you want to delete the menu type?', 'Delete', {\n      duration: 5000\n    });\n    confirmationSnackBar.onAction().subscribe(() => {\n      this.deleteItemFromServer();\n      window.location.reload();\n    });\n  }\n  deleteItemFromServer() {\n    this.deleteMenuItem;\n  }\n  deleteMenuItem(menu_ItemId) {\n    this.dataService.deleteMenuType(menu_ItemId).subscribe(result => {\n      this.deleteItem();\n    });\n  }\n}\nMenuitemsComponent.ɵfac = function MenuitemsComponent_Factory(t) {\n  return new (t || MenuitemsComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.HttpClient), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n};\nMenuitemsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MenuitemsComponent,\n  selectors: [[\"app-menuitems\"]],\n  decls: 20,\n  vars: 1,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-10\", \"order-md-1\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n  template: function MenuitemsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"app-navbar\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"table\")(6, \"tr\")(7, \"th\");\n      i0.ɵɵtext(8, \"ID\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"th\");\n      i0.ɵɵtext(10, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"th\");\n      i0.ɵɵtext(12, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"th\");\n      i0.ɵɵtext(14, \"FoodType\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"th\");\n      i0.ɵɵtext(16, \"MenuType\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"th\");\n      i0.ɵɵtext(18, \"MenuCategory\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(19, MenuitemsComponent_tr_19_Template, 16, 6, \"tr\", 4);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"ngForOf\", ctx.menuItems);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;;IAgBIA,0BAAuC;IACjCA,YAA0B;IAAAA,iBAAK;IACnCA,0BAAI;IAAAA,YAAmB;IAAAA,iBAAK;IAC5BA,0BAAI;IAAAA,YAA0B;IAAAA,iBAAK;IACnCA,0BAAI;IAAAA,YAA2B;IAAAA,iBAAK;IACpCA,0BAAI;IAAAA,aAA2B;IAAAA,iBAAK;IACpCA,2BAAI;IAAAA,aAA+B;IAAAA,iBAAK;IACxCA,2BAAI;IAA6CA;MAAA;MAAA;MAAA;MAAA,OAASA,6DAAoC;IAAA,EAAC;IAACA,uBAAM;IAAAA,iBAAS;;;;IAN3GA,eAA0B;IAA1BA,6CAA0B;IAC1BA,eAAmB;IAAnBA,sCAAmB;IACnBA,eAA0B;IAA1BA,6CAA0B;IAC1BA,eAA2B;IAA3BA,8CAA2B;IAC3BA,eAA2B;IAA3BA,8CAA2B;IAC3BA,eAA+B;IAA/BA,kDAA+B;;;ACLzC,OAAM,MAAOC,kBAAkB;EAS7BC,YAAoBC,WAAwB,EAClCC,MAAc,EACdC,IAAgB,EAChBC,QAAqB;IAHX,gBAAW,GAAXH,WAAW;IACrB,WAAM,GAANC,MAAM;IACN,SAAI,GAAJC,IAAI;IACJ,aAAQ,GAARC,QAAQ;IAVlB,cAAS,GAAa,EAAE;EAUS;EAE/BC,QAAQ;IAEN,IAAI,CAACC,eAAe,EAAE;IACtBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,SAAS,CAAC;EAC7B;EAEF;EACF;EACAH,eAAe;IACb,IAAI,CAACL,WAAW,CAACK,eAAe,EAAE,CAACI,SAAS,CACzCD,SAAS,IAAI;MACZ,IAAI,CAACA,SAAS,GAAGA,SAAS;MAC1B;IACF,CAAC,EACAE,KAAK,IAAI;MACRJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CACF;EACH;EAEA;;;;;;;;;;EAWA;;;;;;;;;;;EAYA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;;;;;;;;;EAWA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,UAAU;IAER,MAAMC,oBAAoB,GAAG,IAAI,CAACT,QAAQ,CAACU,IAAI,CAAC,gDAAgD,EAAC,QAAQ,EAAC;MACtGC,QAAQ,EAAE;KACX,CAAC;IAEFF,oBAAoB,CAACG,QAAQ,EAAE,CAACN,SAAS,CAAC,MAAK;MAC7C,IAAI,CAACO,oBAAoB,EAAE;MAC3BC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;IAC1B,CAAC,CAAC;EAEJ;EAEAH,oBAAoB;IAClB,IAAI,CAACI,cAAc;EACrB;EAGFA,cAAc,CAACC,WAAmB;IAChC,IAAI,CAACrB,WAAW,CAACsB,cAAc,CAACD,WAAW,CAAC,CAACZ,SAAS,CAACc,MAAM,IAAG;MAC9D,IAAI,CAACZ,UAAU,EAAE;IACnB,CAAC,CAAC;EACJ;;AAlJab,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDjB/B/B,8BAA6B;MAGnBA,6BAAyB;MAC7BA,iBAAM;MACVA,8BAAkC;MAI1BA,kBAAE;MAAAA,iBAAK;MACXA,0BAAI;MAAAA,qBAAI;MAAAA,iBAAK;MACbA,2BAAI;MAAAA,4BAAW;MAAAA,iBAAK;MACpBA,2BAAI;MAAAA,yBAAQ;MAAAA,iBAAK;MACjBA,2BAAI;MAAAA,yBAAQ;MAAAA,iBAAK;MACjBA,2BAAI;MAAAA,6BAAY;MAAAA,iBAAK;MAEvBA,oEAQK;MACPA,iBAAQ;;;MATmBA,gBAAY;MAAZA,uCAAY","names":["i0","MenuitemsComponent","constructor","dataService","router","http","snackBar","ngOnInit","GetAllMenuItems","console","log","menuItems","subscribe","error","deleteItem","confirmationSnackBar","open","duration","onAction","deleteItemFromServer","window","location","reload","deleteMenuItem","menu_ItemId","deleteMenuType","result","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\menuitems\\menuitems.component.html","C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\menuitems\\menuitems.component.ts"],"sourcesContent":["<div class=\"container-fluid\">\r\n  <div class=\"row\">\r\n      <div class=\"col-md-2\">\r\n          <app-navbar></app-navbar>\r\n      </div>\r\n  <div class=\"col-md-10 order-md-1\">\r\n \r\n<table>\r\n    <tr>\r\n      <th>ID</th>\r\n      <th>Name</th>\r\n      <th>Description</th>\r\n      <th>FoodType</th>\r\n      <th>MenuType</th>\r\n      <th>MenuCategory</th>\r\n    </tr>\r\n    <tr *ngFor=\"let menuItem of menuItems\">\r\n      <td>{{ menuItem.menuItem_Id }}</td>\r\n      <td>{{ menuItem.name }}</td>\r\n      <td>{{ menuItem.description }}</td>\r\n      <td>{{ menuItem.foodTypeName }}</td>\r\n      <td>{{ menuItem.menuTypeName }}</td>\r\n      <td>{{ menuItem.menuCategoryName }}</td>\r\n      <td><button type=\"button\" class=\"btn btn-danger\" (click)=\"deleteMenuItem(menuItem.menuItem_Id)\">Delete</button></td>\r\n    </tr>\r\n  </table>\r\n  </div>\r\n  </div>\r\n</div>\r\n\r\n  \r\n","import { Component, OnInit} from '@angular/core';\r\nimport { DataService } from 'src/app/service/data.Service';\r\nimport { MenuTypes } from 'src/app/shared/menu-types';\r\nimport {Router} from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MenuItem } from 'src/app/shared/menu-item';\r\nimport { FoodType } from 'src/app/shared/food-type';\r\nimport { MenuItemCategory } from 'src/app/shared/menu-item-category';\r\nimport {map, take } from 'rxjs/operators';\r\n\r\n\r\n@Component({\r\n  selector: 'app-menuitems',\r\n  templateUrl: './menuitems.component.html',\r\n  styleUrls: ['./menuitems.component.css']\r\n})\r\nexport class MenuitemsComponent {\r\n\r\n  menuItems: MenuItem[]=[]\r\n  // foodTypes: FoodType[] = []\r\n  // menuCategories: MenuItemCategory [] = []\r\n  // menuTypes:MenuTypes[] = []\r\n  httpClient: any;\r\n  apiUrl: any;\r\n\r\n  constructor(private dataService: DataService, \r\n    private router: Router,\r\n    private http: HttpClient,\r\n    private snackBar: MatSnackBar){}\r\n\r\n    ngOnInit(): void{\r\n   \r\n      this.GetAllMenuItems()\r\n      console.log(this.menuItems)\r\n    }\r\n\r\n  /*************************** MENU ITEM ************/\r\n/**Get all menu items** */\r\nGetAllMenuItems() {\r\n  this.dataService.GetAllMenuItems().subscribe(\r\n    (menuItems) => {\r\n      this.menuItems = menuItems;\r\n      // this.loadAssociatedNames();\r\n    },\r\n    (error) => {\r\n      console.error(error);\r\n    }\r\n  );\r\n}\r\n\r\n/*GetAllMenuItems() {\r\n  this.dataService.GetAllMenuItems().subscribe(result => {\r\n    let menuItemList:any[] = result\r\n    menuItemList.forEach((element) => {\r\n      this.menuItems.push(element);\r\n      \r\n      \r\n    });\r\n  })\r\n}*/\r\n\r\n/*GetAllMenuItems(): void {\r\n  this.http.get<MenuItem[]>('/MenuItems/GetAllMenuItems').subscribe(\r\n    (response) => {\r\n      this.menuItems = response;\r\n      this.loadAssociatedNames();\r\n    },\r\n    (error) => {\r\n      console.error('Failed to fetch menu items:', error);\r\n    }\r\n  );\r\n}*/\r\n\r\n// loadAssociatedNames(): void {\r\n//   for (const menuItem of this.menuItems) {\r\n//     this.getFoodTypeName(menuItem.foodTypeId);\r\n//     this.getMenuItemCategoryName(menuItem.menuItemCategory_Id);\r\n//     this.getFoodTypeName(menuItem.menu_TypeId);\r\n//   }\r\n// }\r\n\r\n/*loadMenuTypeName(menuItem: MenuTypes): void {\r\n  this.http.get<any>(`api/MenuType/GetAllMenuTypes${menuItem.name}`).subscribe(\r\n    (response) => {\r\n      menuItem.name = response.name;\r\n    },\r\n    (error) => {\r\n      console.error('Failed to fetch menu type name:', error);\r\n    }\r\n  );\r\n}*/\r\n\r\n// getFoodTypeName(foodTypeId: number): void {\r\n//   this.dataService.GetFoodTypeById(foodTypeId).subscribe(\r\n//     (foodType) => {\r\n//       const foundFoodType = this.foodTypes.find((ft) => ft.foodTypeId == foodType.foodTypeId);\r\n//       if (foundFoodType) {\r\n//         foundFoodType.name = foodType.name;\r\n//       } else {\r\n//         this.foodTypes.push(foodType);\r\n//       }\r\n//     },\r\n//     (error) => {\r\n//       console.error('Failed to fetch food type name:', error);\r\n//     }\r\n//   );\r\n// }\r\n\r\n// getMenuItemCategoryName(categoryId: number): void {\r\n//   this.dataService.GetMenuItemCategoryById(categoryId).subscribe(\r\n//     (menuItemCategory) => {\r\n//       const foundCategory = this.menuCategories.find((mc) => mc.MenuItemCategoryId == menuItemCategory.category_Id);\r\n//       if (foundCategory) {\r\n//         foundCategory.name = menuItemCategory.name;\r\n//       } else {\r\n//         this.menuCategories.push(menuItemCategory);\r\n//       }\r\n//     },\r\n//     (error) => {\r\n//       console.error('Failed to fetch menu category name:', error);\r\n//     }\r\n//   );\r\n// }\r\n\r\n// getMenuTypeName(menuTypeId: number): void {\r\n//   this.dataService.GetMenuTypeById(menuTypeId).subscribe(\r\n//     (menuType) => {\r\n//       const foundMenuType = this.menuTypes.find((mt) => mt.menu_TypeId == menuType.menu_TypeId);\r\n//       if (foundMenuType) {\r\n//         foundMenuType.name = menuType.name;\r\n//       } else {\r\n//         this.menuTypes.push(menuType);\r\n//       }\r\n//     },\r\n//     (error) => {\r\n//       console.error('Failed to fetch menu type name:', error);\r\n//     }\r\n//   );\r\n// }\r\n\r\ndeleteItem(): void{\r\n \r\n  const confirmationSnackBar = this.snackBar.open('Are you sure you want to delete the menu type?','Delete',{\r\n      duration: 5000,\r\n    });\r\n\r\n    confirmationSnackBar.onAction().subscribe(() => {\r\n      this.deleteItemFromServer();\r\n      window.location.reload();\r\n    })\r\n\r\n  }\r\n\r\n  deleteItemFromServer(): void{\r\n    this.deleteMenuItem;\r\n  }\r\n\r\n\r\ndeleteMenuItem(menu_ItemId: Number){\r\n  this.dataService.deleteMenuType(menu_ItemId).subscribe(result => {\r\n    this.deleteItem();\r\n  });\r\n}\r\n \r\n\r\n/*loadMenuCategoryName(menuItem: MenuItem): void {\r\n  this.http.get<any>(`api/MenuItem_Category/GetAllMenuItemCategories${menuItem.name}`).subscribe(\r\n    (response) => {\r\n      menuItem.menuCategoryName = response.name;\r\n    },\r\n    (error) => {\r\n      console.error('Failed to fetch menu category name:', error);\r\n    }\r\n  );\r\n}*/\r\n\r\n\r\n/*loadFoodTypeName(menuItem: MenuItem): void {\r\n  this.http.get<any>(`api/foodTypeController/GetAllFoodTypes${menuItem.name}`).subscribe(\r\n    (response) => {\r\n      menuItem.foodTypeName = response.name;\r\n    },\r\n    (error) => {\r\n      console.error('Failed to fetch food type name:', error);\r\n    }\r\n  );\r\n}\r\n*/\r\n\r\n// ...\r\n\r\n/*populateColumnNames() {\r\n  for (const menuItem of this.menuItems) {\r\n    this.dataService.GetFoodTypeById(menuItem.foodType_Id)\r\n      .pipe(take(1))\r\n      .subscribe({\r\n        next: (foodTypeName) => {\r\n          menuItem.foodTypeName = foodTypeName;\r\n        },\r\n        error: (error) => {\r\n          console.error(error);\r\n        }\r\n      });\r\n\r\n    this.dataService.GetMenuItemCategoryById(menuItem.menuCategory_Id)\r\n      .pipe(take(1))\r\n      .subscribe({\r\n        next: (menuCategoryName) => {\r\n          menuItem.menuCategoryName = menuCategoryName;\r\n        },\r\n        error: (error) => {\r\n          console.error(error);\r\n        }\r\n      });\r\n\r\n    this.dataService.GetMenuTypeById(menuItem.menu_TypeId)\r\n      .pipe(take(1))\r\n      .subscribe({\r\n        next: (menuTypeName) => {\r\n          menuItem.menuTypeName = menuTypeName;\r\n        },\r\n        error: (error) => {\r\n          console.error(error);\r\n        }\r\n      });\r\n  }\r\n}*/\r\n\r\n/*populateColumnNames() {\r\n  for (const menuItem of this.menuItems) {\r\n    if (menuItem.foodType && menuItem.foodType.name) {\r\n      menuItem.foodType.name = menuItem.foodType.name;\r\n    }\r\n\r\n    if (menuItem.category && menuItem.category.name) {\r\n      menuItem.category.name = menuItem.category.name;\r\n    }\r\n  }\r\n}*/\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}