{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/supplier.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/core\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/material/card\";\nimport * as i11 from \"@angular/material/button\";\nfunction AddSupplierComponent_mat_option_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", item_r1.supplier_TypeId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r1.name);\n  }\n}\nexport class AddSupplierComponent {\n  constructor(supplierservice, fb, router, snackBar) {\n    this.supplierservice = supplierservice;\n    this.fb = fb;\n    this.router = router;\n    this.snackBar = snackBar;\n    //   supplierTypesData:SupplierType[]=[]\n    //   toastContainer: any;\n    //   constructor(private  supplierservice: SupplierService, private router: Router, private dialog: MatDialog, private snackBar: MatSnackBar) { }\n    //   supplierForm: FormGroup = new FormGroup({\n    //     name: new FormControl('',[Validators.required]),\n    //     supplierTypeName: new FormControl('',[Validators.required]),\n    //     email_Address: new FormControl('',[Validators.required]),\n    //     physical_Address: new FormControl('',[Validators.required]),\n    //     phoneNumber: new FormControl('',[Validators.required])\n    //   })\n    //   ngOnInit(): void {\n    //     this.GetAllSupplierTypes()\n    //   }\n    //   cancel(){\n    //     this.router.navigate(['/view-suppliers'])\n    //   }\n    //   GetAllSupplierTypes(){\n    //     this.supplierservice.GetAllSupplierTypes().subscribe(result => {\n    //       let supplierTypeList:any[] = result\n    //       supplierTypeList.forEach((element) => {\n    //         this.supplierTypesData.push(element)\n    //       });\n    //     });\n    //   }\n    //   onSubmit(){\n    //     let supplier = new Supplier();\n    //     supplier.name = this.supplierForm.value.name;\n    //     supplier.supplierTypeName = this.supplierForm.value.supplierTypeName;\n    //     supplier.email_Address = this.supplierForm.value.email_Address;\n    //     supplier.physical_Address = this.supplierForm.value.physical_Address;\n    //     supplier.phoneNumber = this.supplierForm.value.phoneNumber;\n    //         this.supplierservice.AddSupplier(supplier).subscribe(result => {\n    //               this.router.navigate(['/view-suppliers'])\n    //         })\n    //  this.supplierservice.AddSupplier(supplier).subscribe((res:any) => {\n    //   if(res.statusCode == 200)\n    //   {\n    //     this.router.navigate(['/'])\n    //   }\n    //   else\n    //   {\n    //   }\n    //  });\n    //  this.snackBar.open(this.supplierForm.get('name')!.value + ` created successfully`, 'X', {duration: 5000});\n    //      }\n    //      showSuccessMessage(message: string): void {\n    //       const snackBarRef: MatSnackBarRef<any> = this.snackBar.open(message, 'Ok', {\n    //         duration: 5000, // Duration in milliseconds\n    //         horizontalPosition: 'center',\n    //         verticalPosition: 'bottom'\n    //       });\n    //         snackBarRef.afterDismissed().subscribe(() => {\n    //         this.toastContainer.clear();\n    //       });\n    // }\n    this.formData = new FormData();\n    this.supplierTypesData = [];\n    this.supplierForm = this.fb.group({\n      name: ['', Validators.required],\n      supplierType: [null, Validators.required],\n      email_Address: ['', Validators.required],\n      phoneNumber: ['', Validators.required],\n      physical_Address: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.GetAllSupplierTypes();\n  }\n  GetAllSupplierTypes() {\n    this.supplierservice.GetAllSupplierTypes().subscribe(result => {\n      let brandList = result;\n      brandList.forEach(element => {\n        this.supplierTypesData.push(element);\n      });\n    });\n  }\n  onSubmit() {\n    if (this.supplierForm.valid) {\n      this.formData.append('name', this.supplierForm.get('name').value);\n      this.formData.append('supplierType', this.supplierForm.get('supplierType').value);\n      this.formData.append('email_Address', this.supplierForm.get('email_Address').value);\n      this.formData.append('phoneNumber', this.supplierForm.get('phoneNumber').value);\n      this.formData.append('physical_Address', this.supplierForm.get('physical_Address').value);\n      this.supplierservice.AddSupplier(this.formData).subscribe(() => {\n        this.clearData();\n        this.router.navigateByUrl('view-suppliers').then(navigated => {\n          if (navigated) {\n            this.snackBar.open(this.supplierForm.get('name').value + ` created successfully`, 'X', {\n              duration: 5000\n            });\n          }\n        });\n      });\n    }\n  }\n  clearData() {\n    this.formData.delete(\"name\");\n    this.formData.delete(\"supplierType\");\n    this.formData.delete(\"email_Address\");\n    this.formData.delete(\"phoneNumber\");\n    this.formData.delete(\"physical_Address\");\n  }\n}\nAddSupplierComponent.ɵfac = function AddSupplierComponent_Factory(t) {\n  return new (t || AddSupplierComponent)(i0.ɵɵdirectiveInject(i1.SupplierService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n};\nAddSupplierComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddSupplierComponent,\n  selectors: [[\"app-add-supplier\"]],\n  decls: 33,\n  vars: 2,\n  consts: [[\"fxLayout\", \"row\", \"fxLayoutAlign\", \"center center\", 1, \"login-wrapper\"], [1, \"box\"], [\"enctype\", \"multipart/form-data\", 1, \"form\", 3, \"formGroup\", \"submit\"], [1, \"full-width\"], [\"matInput\", \"\", \"placeholder\", \"Enter the Product Name\", \"formControlName\", \"name\"], [\"formControlName\", \"supplierType\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"formControlName\", \"email_Address\"], [\"matInput\", \"\", \"formControlName\", \"phoneNumber\"], [\"matInput\", \"\", \"formControlName\", \"physical_Address\"], [\"mat-stroked-button\", \"\", \"color\", \"primary\", 1, \"btn-block\"], [3, \"value\"]],\n  template: function AddSupplierComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-card-header\")(3, \"mat-card-title\");\n      i0.ɵɵtext(4, \"Add Product\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"form\", 2);\n      i0.ɵɵlistener(\"submit\", function AddSupplierComponent_Template_form_submit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(6, \"mat-card-content\")(7, \"mat-form-field\", 3)(8, \"mat-label\");\n      i0.ɵɵtext(9, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"mat-form-field\")(12, \"mat-label\");\n      i0.ɵɵtext(13, \"Product Type\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"mat-select\", 5);\n      i0.ɵɵtemplate(15, AddSupplierComponent_mat_option_15_Template, 2, 2, \"mat-option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"mat-form-field\", 3)(17, \"mat-label\");\n      i0.ɵɵtext(18, \"Product Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"textarea\", 7);\n      i0.ɵɵtext(20, \" \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"mat-form-field\", 3)(22, \"mat-label\");\n      i0.ɵɵtext(23, \"Product Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"textarea\", 8);\n      i0.ɵɵtext(25, \" \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(26, \"mat-form-field\", 3)(27, \"mat-label\");\n      i0.ɵɵtext(28, \"Product Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"textarea\", 9);\n      i0.ɵɵtext(30, \" \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(31, \"button\", 10);\n      i0.ɵɵtext(32, \"Submit\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.supplierForm);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"ngForOf\", ctx.supplierTypesData);\n    }\n  },\n  dependencies: [i5.NgForOf, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName, i6.MatOption, i7.MatFormField, i7.MatLabel, i8.MatInput, i9.MatSelect, i10.MatCard, i10.MatCardContent, i10.MatCardHeader, i10.MatCardTitle, i11.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","AddSupplierComponent","constructor","supplierservice","fb","router","snackBar","FormData","group","name","required","supplierType","email_Address","phoneNumber","physical_Address","ngOnInit","GetAllSupplierTypes","subscribe","result","brandList","forEach","element","supplierTypesData","push","onSubmit","supplierForm","valid","formData","append","get","value","AddSupplier","clearData","navigateByUrl","then","navigated","open","duration","delete","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Supplier Management\\Suppliers\\add-supplier\\add-supplier.component.ts","C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Supplier Management\\Suppliers\\add-supplier\\add-supplier.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\nimport { SupplierService } from 'src/app/service/supplier.service';\nimport { SupplierType } from 'src/app/shared/SupplierTypes';\nimport { Supplier } from 'src/app/shared/supplier';\n\n@Component({\n  selector: 'app-add-supplier',\n  templateUrl: './add-supplier.component.html',\n  styleUrls: ['./add-supplier.component.css']\n})\nexport class AddSupplierComponent implements OnInit{\n\n//   supplierTypesData:SupplierType[]=[]\n//   toastContainer: any;\n\n//   constructor(private  supplierservice: SupplierService, private router: Router, private dialog: MatDialog, private snackBar: MatSnackBar) { }\n\n//   supplierForm: FormGroup = new FormGroup({\n//     name: new FormControl('',[Validators.required]),\n//     supplierTypeName: new FormControl('',[Validators.required]),\n//     email_Address: new FormControl('',[Validators.required]),\n//     physical_Address: new FormControl('',[Validators.required]),\n//     phoneNumber: new FormControl('',[Validators.required])\n \n//   })\n\n//   ngOnInit(): void {\n//     this.GetAllSupplierTypes()\n//   }\n\n//   cancel(){\n//     this.router.navigate(['/view-suppliers'])\n//   }\n\n//   GetAllSupplierTypes(){\n//     this.supplierservice.GetAllSupplierTypes().subscribe(result => {\n//       let supplierTypeList:any[] = result\n//       supplierTypeList.forEach((element) => {\n//         this.supplierTypesData.push(element)\n//       });\n//     });\n//   }\n\n//   onSubmit(){\n\n//     let supplier = new Supplier();\n//     supplier.name = this.supplierForm.value.name;\n//     supplier.supplierTypeName = this.supplierForm.value.supplierTypeName;\n//     supplier.email_Address = this.supplierForm.value.email_Address;\n//     supplier.physical_Address = this.supplierForm.value.physical_Address;\n//     supplier.phoneNumber = this.supplierForm.value.phoneNumber;\n\n//         this.supplierservice.AddSupplier(supplier).subscribe(result => {\n//               this.router.navigate(['/view-suppliers'])\n//         })\n\n//  this.supplierservice.AddSupplier(supplier).subscribe((res:any) => {\n\n//   if(res.statusCode == 200)\n//   {\n//     this.router.navigate(['/'])\n//   }\n//   else\n//   {\n  \n//   }\n//  });\n//  this.snackBar.open(this.supplierForm.get('name')!.value + ` created successfully`, 'X', {duration: 5000});\n//      }\n\n//      showSuccessMessage(message: string): void {\n//       const snackBarRef: MatSnackBarRef<any> = this.snackBar.open(message, 'Ok', {\n//         duration: 5000, // Duration in milliseconds\n//         horizontalPosition: 'center',\n//         verticalPosition: 'bottom'\n//       });\n    \n//         snackBarRef.afterDismissed().subscribe(() => {\n//         this.toastContainer.clear();\n//       });\n// }\n\nformData = new FormData();\nsupplierTypesData:SupplierType[]=[]\n\nsupplierForm: FormGroup = this.fb.group({\n name: ['', Validators.required],\n supplierType: [null, Validators.required],\n email_Address: ['', Validators.required],\n phoneNumber: ['', Validators.required],\n physical_Address: ['', Validators.required]\n\n})\n\nconstructor(private supplierservice: SupplierService, private fb: FormBuilder, private router: Router, private snackBar: MatSnackBar) { }\n\nngOnInit(): void {\n\n this.GetAllSupplierTypes()\n}\n\nGetAllSupplierTypes(){\nthis.supplierservice.GetAllSupplierTypes().subscribe(result => {\n let brandList:any[] = result\n brandList.forEach((element) => {\n   this.supplierTypesData.push(element)\n });\n});\n}\n\nonSubmit() {\n if(this.supplierForm.valid)\n {\n   this.formData.append('name', this.supplierForm.get('name')!.value);\n   this.formData.append('supplierType', this.supplierForm.get('supplierType')!.value);\n   this.formData.append('email_Address', this.supplierForm.get('email_Address')!.value);\n   this.formData.append('phoneNumber', this.supplierForm.get('phoneNumber')!.value);\n   this.formData.append('physical_Address', this.supplierForm.get('physical_Address')!.value);\n   \n   this.supplierservice.AddSupplier(this.formData).subscribe(() => {\n     this.clearData()\n     this.router.navigateByUrl('view-suppliers').then((navigated: boolean) => {\n       if(navigated) {\n         this.snackBar.open(this.supplierForm.get('name')!.value + ` created successfully`, 'X', {duration: 5000});\n       }\n    });\n   });\n }\n}\n\nclearData(){\n this.formData.delete(\"name\");\n this.formData.delete(\"supplierType\");\n this.formData.delete(\"email_Address\");\n this.formData.delete(\"phoneNumber\");\n this.formData.delete(\"physical_Address\");\n}\n\n}\n","<!-- \n<div class=\"container-fluid\">\n    <div class=\"row\">\n        <div class=\"col-md-2\">\n            <app-navbar></app-navbar>\n        </div>\n    <div class=\"col-md-10 order-md-2\">\n  <h4 style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 50px;\">Add Supplier </h4>\n  <hr>\n  <div class=\"container\">\n  <div class=\"row\">  \n  <form [formGroup]=\"supplierForm\" class=\"form-horizontal\"  (ngSubmit)=\"onSubmit()\">\n\n      <div class=\"form-group\">\n          <label class=\" col-md-1\" style=\"font-weight: bold;\" for=\"name\">Name:</label>\n          <div class=\"col-md-6\">\n            <input class=\"form-control\" placeholder=\"Enter Supplier Name\" [required]=\"true\" name=\"name\" formControlName=\"name\">\n          </div>\n      </div>\n\n      <div class=\"form-group\">\n        <label class=\"col-md-1\" style=\"font-weight: bold;\" for=\"supplierTypeName\">Supplier Type</label>\n        <div class=\"col-md-6\">\n        <select class=\"form-control\" id=\"supplierTypeName\" name=\"supplierTypeName\">\n          <option *ngFor=\"let item of supplierTypesData\" [value]=\"item.supplier_TypeId\">{{ item.name }}</option>\n        </select>\n      </div>\n      </div>\n      \n    \n      <div class=\"form-group\">\n        <span>\n          <label class=\"col-sm-1\" style=\"font-weight: bold;\" for=\"email_Address\">Email Address</label>\n          <div class=\"col-sm-6\">\n            <input class=\"form-control\"  placeholder=\"xxxxx@gmail.com\" [required]=\"true\" name=\"email_Address\" formControlName=\"email_Address\">\n          </div>\n        </span>\n      </div>\n    \n      <div class=\"form-group\">\n          <label class=\"col-sm-2\" style=\"font-weight: bold;\" for=\"phoneNumber\">Phone Number:</label>\n          <div class=\"col-sm-6\">\n            <input class=\"form-control\" type=\"text\"  placeholder=\"Enter 10-digit number\" [required]=\"true\" name=\"phoneNumber\" formControlName=\"phoneNumber\">\n          </div>\n      </div>\n\n      \n    <div class=\"form-group\">\n        <label class=\"col-sm-1\" style=\"font-weight: bold;\" for=\"physical_Address\">Physical Address:</label>\n        <div class=\"col-sm-6\">\n          <input class=\"form-control\" type=\"text\" id=\"physical_Address\" placeholder=\"Enter Address\" name=\"physical_Address\" [required]=\"true\" formControlName=\"physical_Address\">\n        </div>\n    </div>\n  \n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-1 col-sm-6\">\n          <button style=\"margin-right:1em;\" type=\"submit\" [disabled]=\"!supplierForm.valid\"  class=\"btn btn-sm btn-success\">Add</button>\n          <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"cancel()\">Cancel</button>\n        </div>\n      </div>\n    </form>\n    </div>\n  </div> \n    </div>\n    </div>\n  </div> -->\n\n  <div class=\"login-wrapper\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <mat-card class=\"box\" >\n      <mat-card-header>\n        <mat-card-title>Add Product</mat-card-title>\n      </mat-card-header>\n      <form class=\"form\" [formGroup]=\"supplierForm\" (submit)=\"onSubmit()\" enctype=\"multipart/form-data\">\n        <mat-card-content>\n          <mat-form-field class=\"full-width\">\n            <mat-label>Name</mat-label>\n            <input matInput placeholder=\"Enter the Product Name\" formControlName=\"name\">\n          </mat-form-field>\n        <mat-form-field>\n            <mat-label>Product Type</mat-label>\n            <mat-select formControlName=\"supplierType\" >\n                <mat-option *ngFor=\"let item of supplierTypesData\"  [value]=\"item.supplier_TypeId\">{{item.name}}</mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-form-field class=\"full-width\">\n            <mat-label>Product Description</mat-label>\n            <textarea matInput formControlName=\"email_Address\"> </textarea>\n        </mat-form-field>\n        <mat-form-field class=\"full-width\">\n          <mat-label>Product Description</mat-label>\n          <textarea matInput formControlName=\"phoneNumber\"> </textarea>\n      </mat-form-field>\n      <mat-form-field class=\"full-width\">\n        <mat-label>Product Description</mat-label>\n        <textarea matInput formControlName=\"physical_Address\"> </textarea>\n    </mat-form-field>\n        </mat-card-content>\n        <button mat-stroked-button color=\"primary\" class=\"btn-block\" >Submit</button>\n        \n      </form>\n    </mat-card>\n  </div>\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}