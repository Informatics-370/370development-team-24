{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Employee } from '../../../../shared/employee';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../service/employee.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../../../../navbar/navbar.component\";\nfunction EditEmployeeComponent_option_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", item_r1.employee_RoleId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r1.name);\n  }\n}\nexport class EditEmployeeComponent {\n  constructor(employeeservice, router, activated, dialog, snackBar) {\n    this.employeeservice = employeeservice;\n    this.router = router;\n    this.activated = activated;\n    this.dialog = dialog;\n    this.snackBar = snackBar;\n    this.selectedEmployeeRole = null;\n    this.employeeRolesData = [];\n    this.editEmployee = new Employee();\n    this.updateEmployeeForm = new FormGroup({\n      surname: new FormControl('', [Validators.required]),\n      firstName: new FormControl('', [Validators.required]),\n      employeeRole: new FormControl('', [Validators.required]),\n      email_Address: new FormControl('', [Validators.required]),\n      phoneNumber: new FormControl('', [Validators.required]),\n      physical_Address: new FormControl('', [Validators.required])\n    });\n  }\n  ngOnInit() {\n    this.activated.params.subscribe(params => {\n      this.employeeservice.getEmployee(params['id']).subscribe(res => {\n        this.editEmployee = res;\n        this.updateEmployeeForm.controls['surname'].setValue(this.editEmployee.surname);\n        this.updateEmployeeForm.controls['firstName'].setValue(this.editEmployee.firstName);\n        this.updateEmployeeForm.controls['email_Address'].setValue(this.editEmployee.email_Address);\n        this.updateEmployeeForm.controls['phoneNumber'].setValue(this.editEmployee.phoneNumber);\n        this.updateEmployeeForm.controls['physical_Address'].setValue(this.editEmployee.physical_Address);\n        // Find the selected Supplier Type in the supplierTypesData array\n        const selectedType = this.employeeRolesData.find(type => type.name === this.editEmployee.employeeRoleName);\n        if (selectedType) {\n          this.updateEmployeeForm.controls['employeeRole'].patchValue(selectedType.employee_RoleId);\n        }\n      });\n    });\n    this.GetAllEmployeeRoles(); // Call this method to populate the supplierTypesData array\n  }\n\n  cancel() {\n    this.router.navigate(['/view-employees']);\n  }\n  GetAllEmployeeRoles() {\n    this.employeeservice.GetAllEmployeeRoles().subscribe(result => {\n      let employeeRoleList = result;\n      employeeRoleList.forEach(element => {\n        this.employeeRolesData.push(element);\n      });\n    });\n  }\n  updateEmployee() {\n    let employee = new Employee();\n    employee.surname = this.updateEmployeeForm.value.supplierName;\n    employee.firstName = this.updateEmployeeForm.value.supplierName;\n    employee.employeeRole = this.updateEmployeeForm.value.employeeRole; // Assign the selected employee Role ID\n    employee.email_Address = this.updateEmployeeForm.value.email_Address;\n    employee.phoneNumber = this.updateEmployeeForm.value.phoneNumber;\n    employee.physical_Address = this.updateEmployeeForm.value.physical_Address;\n    this.employeeservice.EditEmployee(this.editEmployee.employeeId, employee).subscribe(response => {\n      if (response.statusCode === 200) {\n        this.router.navigate(['./view-employees']);\n        window.location.reload();\n        this.showSuccessMessage('Employee Information updated successfully!');\n      } else {\n        // Handle error if needed\n      }\n    }, error => {\n      // Handle error if needed\n    });\n  }\n  showSuccessMessage(message) {\n    const snackBarRef = this.snackBar.open(message, 'Ok', {\n      duration: 3000,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom'\n    });\n  }\n}\nEditEmployeeComponent.ɵfac = function EditEmployeeComponent_Factory(t) {\n  return new (t || EditEmployeeComponent)(i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n};\nEditEmployeeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EditEmployeeComponent,\n  selectors: [[\"app-edit-employee\"]],\n  decls: 48,\n  vars: 8,\n  consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-10\", \"order-md-1\"], [2, \"text-align\", \"center\", \"font-family\", \"'Times New Roman', Times, serif\", \"font-size\", \"50px\"], [1, \"container\"], [1, \"form-horizontal\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"surname\", 1, \"col-sm-1\", 2, \"font-weight\", \"bold\"], [1, \"col-sm-6\"], [\"id\", \"surname\", \"placeholder\", \"Enter Surname\", \"formControlName\", \"surname\", 1, \"form-control\", 3, \"required\"], [\"for\", \"firstName\", 1, \"col-sm-1\", 2, \"font-weight\", \"bold\"], [\"id\", \"firstName\", \"placeholder\", \"Enter First Name\", \"formControlName\", \"firstName\", 1, \"form-control\", 3, \"required\"], [\"for\", \"employeeRoleName\", 1, \"col-md-1\", 2, \"font-weight\", \"bold\"], [1, \"col-md-6\"], [\"id\", \"employeeRoleName\", \"formControlName\", \"employeeRole\", 1, \"form-control\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"email_Address\", 1, \"col-sm-1\", 2, \"font-weight\", \"bold\"], [\"type\", \"text\", \"id\", \"email_Address\", \"placeholder\", \"Enter Address\", \"formControlName\", \"email_Address\", 1, \"form-control\", 3, \"required\"], [\"for\", \"physical_Address\", 1, \"col-sm-1\", 2, \"font-weight\", \"bold\"], [\"type\", \"text\", \"id\", \"physical_Address\", \"placeholder\", \"Enter Address\", \"formControlName\", \"physical_Address\", 1, \"form-control\", 3, \"required\"], [\"for\", \"phoneNumber\", 1, \"col-sm-1\", 2, \"font-weight\", \"bold\"], [\"type\", \"text\", \"id\", \"phoneNumber\", \"placeholder\", \"Enter 10-digit number\", \"formControlName\", \"phoneNumber\", 1, \"form-control\", 3, \"required\"], [1, \"col-sm-offset-1\", \"col-sm-6\"], [\"type\", \"submit\", 1, \"btn\", \"btn-sm\", \"btn-success\", 2, \"margin-right\", \"1em\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-danger\", 3, \"click\"], [3, \"value\"]],\n  template: function EditEmployeeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"app-navbar\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"h4\", 4);\n      i0.ɵɵtext(6, \"Edit Employee\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"hr\");\n      i0.ɵɵelementStart(8, \"div\", 5)(9, \"div\", 1)(10, \"form\", 6);\n      i0.ɵɵlistener(\"ngSubmit\", function EditEmployeeComponent_Template_form_ngSubmit_10_listener() {\n        return ctx.updateEmployee();\n      });\n      i0.ɵɵelementStart(11, \"div\", 7)(12, \"label\", 8);\n      i0.ɵɵtext(13, \"Surname:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 9);\n      i0.ɵɵelement(15, \"input\", 10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 7)(17, \"label\", 11);\n      i0.ɵɵtext(18, \"FirstName:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"div\", 9);\n      i0.ɵɵelement(20, \"input\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"div\", 7)(22, \"label\", 13);\n      i0.ɵɵtext(23, \"Supplier Type\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"div\", 14)(25, \"select\", 15);\n      i0.ɵɵtemplate(26, EditEmployeeComponent_option_26_Template, 2, 2, \"option\", 16);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(27, \"div\", 7)(28, \"label\", 17);\n      i0.ɵɵtext(29, \"Email Address:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"div\", 9);\n      i0.ɵɵelement(31, \"textarea\", 18);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(32, \"div\", 7)(33, \"label\", 19);\n      i0.ɵɵtext(34, \"Address:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"div\", 9);\n      i0.ɵɵelement(36, \"textarea\", 20);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(37, \"div\", 7)(38, \"label\", 21);\n      i0.ɵɵtext(39, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(40, \"div\", 9);\n      i0.ɵɵelement(41, \"textarea\", 22);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(42, \"div\", 7)(43, \"div\", 23)(44, \"button\", 24);\n      i0.ɵɵtext(45, \"Confirm\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(46, \"button\", 25);\n      i0.ɵɵlistener(\"click\", function EditEmployeeComponent_Template_button_click_46_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(47, \"Cancel\");\n      i0.ɵɵelementEnd()()()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"formGroup\", ctx.updateEmployeeForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"required\", true);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"required\", true);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.employeeRolesData);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"required\", true);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"required\", true);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"required\", true);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", !ctx.updateEmployeeForm.valid);\n    }\n  },\n  dependencies: [i5.NgForOf, i6.ɵNgNoValidate, i6.NgSelectOption, i6.ɵNgSelectMultipleOption, i6.DefaultValueAccessor, i6.SelectControlValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.RequiredValidator, i6.FormGroupDirective, i6.FormControlName, i7.NavbarComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormControl","FormGroup","Validators","Employee","i0","EditEmployeeComponent","constructor","employeeservice","router","activated","dialog","snackBar","surname","required","firstName","employeeRole","email_Address","phoneNumber","physical_Address","ngOnInit","params","subscribe","getEmployee","res","editEmployee","updateEmployeeForm","controls","setValue","selectedType","employeeRolesData","find","type","name","employeeRoleName","patchValue","employee_RoleId","GetAllEmployeeRoles","cancel","navigate","result","employeeRoleList","forEach","element","push","updateEmployee","employee","value","supplierName","EditEmployee","employeeId","response","statusCode","window","location","reload","showSuccessMessage","error","message","snackBarRef","open","duration","horizontalPosition","verticalPosition","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Employees\\view-employees\\edit-employee\\edit-employee.component.ts","C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Employees\\view-employees\\edit-employee\\edit-employee.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { EmployeeService } from '../../../../service/employee.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Employee } from '../../../../shared/employee';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\r\nimport { Employee_Role } from 'src/app/shared/EmployeeRole';\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit-employee',\r\n  templateUrl: './edit-employee.component.html',\r\n  styleUrls: ['./edit-employee.component.css']\r\n})\r\nexport class EditEmployeeComponent {\r\n  selectedEmployeeRole: Employee_Role | null = null;\r\n  employeeRolesData: Employee_Role[] = [];\r\n  editEmployee: Employee = new Employee();\r\n\r\n  updateEmployeeForm: FormGroup = new FormGroup({\r\n    surname: new FormControl('', [Validators.required]),\r\n    firstName: new FormControl('', [Validators.required]),\r\n    employeeRole: new FormControl('', [Validators.required]),\r\n    email_Address: new FormControl('', [Validators.required]),\r\n    phoneNumber: new FormControl('', [Validators.required]),\r\n    physical_Address: new FormControl('', [Validators.required])\r\n  });\r\n\r\n  constructor(\r\n    private employeeservice: EmployeeService,\r\n    private router: Router,\r\n    private activated: ActivatedRoute,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.activated.params.subscribe(params => {\r\n      this.employeeservice.getEmployee(params['id']).subscribe(res => {\r\n        this.editEmployee = res as Employee;\r\n\r\n        this.updateEmployeeForm.controls['surname'].setValue(this.editEmployee.surname);\r\n        this.updateEmployeeForm.controls['firstName'].setValue(this.editEmployee.firstName);\r\n        this.updateEmployeeForm.controls['email_Address'].setValue(this.editEmployee.email_Address);\r\n        this.updateEmployeeForm.controls['phoneNumber'].setValue(this.editEmployee.phoneNumber);\r\n        this.updateEmployeeForm.controls['physical_Address'].setValue(this.editEmployee.physical_Address);\r\n\r\n        // Find the selected Supplier Type in the supplierTypesData array\r\n        const selectedType = this.employeeRolesData.find(type => type.name === this.editEmployee.employeeRoleName);\r\n        if (selectedType) {\r\n          this.updateEmployeeForm.controls['employeeRole'].patchValue(selectedType.employee_RoleId);\r\n        }\r\n      });\r\n    });\r\n\r\n    this.GetAllEmployeeRoles(); // Call this method to populate the supplierTypesData array\r\n  }\r\n\r\n  cancel() {\r\n    this.router.navigate(['/view-employees']);\r\n  }\r\n\r\n  GetAllEmployeeRoles() {\r\n    this.employeeservice.GetAllEmployeeRoles().subscribe(result => {\r\n      let employeeRoleList: any[] = result;\r\n      employeeRoleList.forEach((element) => {\r\n        this.employeeRolesData.push(element);\r\n      });\r\n    });\r\n  }\r\n\r\n  updateEmployee() {\r\n    let employee = new Employee();\r\n    employee.surname = this.updateEmployeeForm.value.supplierName;\r\n    employee.firstName = this.updateEmployeeForm.value.supplierName;\r\n    employee.employeeRole = this.updateEmployeeForm.value.employeeRole; // Assign the selected employee Role ID\r\n    employee.email_Address = this.updateEmployeeForm.value.email_Address;\r\n    employee.phoneNumber = this.updateEmployeeForm.value.phoneNumber;\r\n    employee.physical_Address = this.updateEmployeeForm.value.physical_Address;\r\n\r\n    this.employeeservice.EditEmployee(this.editEmployee.employeeId, employee).subscribe(\r\n      (response: any) => {\r\n        if (response.statusCode === 200) {\r\n          this.router.navigate(['./view-employees']);\r\n          window.location.reload();\r\n          this.showSuccessMessage('Employee Information updated successfully!');\r\n        } else {\r\n          // Handle error if needed\r\n        }\r\n      },\r\n      (error) => {\r\n        // Handle error if needed\r\n      }\r\n    );\r\n  }\r\n\r\n  showSuccessMessage(message: string): void {\r\n    const snackBarRef: MatSnackBarRef<any> = this.snackBar.open(message, 'Ok', {\r\n      duration: 3000, // Duration in milliseconds\r\n      horizontalPosition: 'center',\r\n      verticalPosition: 'bottom'\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\n","<div class=\"container-fluid\">\r\n  <div class=\"row\">\r\n      <div class=\"col-md-2\">\r\n          <app-navbar></app-navbar>\r\n      </div>\r\n  <div class=\"col-md-10 order-md-1\">\r\n<h4 style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-size: 50px;\">Edit Employee</h4>\r\n<hr>\r\n<div class=\"container\">\r\n<div class=\"row\">  \r\n<form [formGroup]=\"updateEmployeeForm\" class=\"form-horizontal\"  (ngSubmit)=\"updateEmployee()\">\r\n    <div class=\"form-group\">\r\n        <label class=\" col-sm-1\" style=\"font-weight: bold;\" for=\"surname\">Surname:</label>\r\n        <div class=\"col-sm-6\">\r\n          <input class=\"form-control\" id=\"surname\" placeholder=\"Enter Surname\" [required]=\"true\" formControlName=\"surname\">\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label class=\"col-sm-1\" style=\"font-weight: bold;\" for=\"firstName\">FirstName:</label>\r\n        <div class=\"col-sm-6\">\r\n          <input class=\"form-control\" id=\"firstName\" placeholder=\"Enter First Name\" [required]=\"true\" formControlName=\"firstName\">\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label class=\"col-md-1\" style=\"font-weight: bold;\" for=\"employeeRoleName\">Supplier Type</label>\r\n      <div class=\"col-md-6\">\r\n        <select class=\"form-control\" id=\"employeeRoleName\" formControlName=\"employeeRole\">\r\n          <option *ngFor=\"let item of employeeRolesData\" [value]=\"item.employee_RoleId\">{{ item.name }}</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"form-group\">\r\n      <label class=\"col-sm-1\" style=\"font-weight: bold;\" for=\"email_Address\">Email Address:</label>\r\n      <div class=\"col-sm-6\">\r\n        <textarea class=\"form-control\" type=\"text\" id=\"email_Address\" placeholder=\"Enter Address\" [required]=\"true\" formControlName=\"email_Address\"></textarea>\r\n      </div>\r\n  </div>\r\n    <div class=\"form-group\">\r\n        <label class=\"col-sm-1\" style=\"font-weight: bold;\" for=\"physical_Address\">Address:</label>\r\n        <div class=\"col-sm-6\">\r\n          <textarea class=\"form-control\" type=\"text\" id=\"physical_Address\" placeholder=\"Enter Address\" [required]=\"true\" formControlName=\"physical_Address\"></textarea>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n        <label class=\"col-sm-1\" style=\"font-weight: bold;\" for=\"phoneNumber\">Email:</label>\r\n        <div class=\"col-sm-6\">\r\n          <textarea class=\"form-control\" type=\"text\" id=\"phoneNumber\" placeholder=\"Enter 10-digit number\" [required]=\"true\" formControlName=\"phoneNumber\"></textarea>\r\n        </div>\r\n    </div>\r\n    <div class=\"form-group\">\r\n      <div class=\"col-sm-offset-1 col-sm-6\">\r\n        <button style=\"margin-right:1em;\" type=\"submit\" [disabled]=\"!updateEmployeeForm.valid\" class=\"btn btn-sm btn-success\">Confirm</button>\r\n        <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"cancel()\">Cancel</button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n  </div>\r\n</div> \r\n  </div>\r\n  </div>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}