{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/datepicker\";\nimport * as i4 from \"@angular/material/card\";\nfunction ScheduleDisplayComponent_div_8_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const event_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(event_r2);\n  }\n}\nfunction ScheduleDisplayComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ul\");\n    i0.ɵɵtemplate(5, ScheduleDisplayComponent_div_8_li_5_Template, 2, 1, \"li\", 4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Events for \", i0.ɵɵpipeBind1(3, 2, ctx_r0.selectedDate), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.getEventsForSelectedDate());\n  }\n}\nexport class ScheduleDisplayComponent {\n  onDateSelected(selectedDate) {\n    this.selectedDate = selectedDate;\n  }\n  getEventsForSelectedDate() {\n    const dateString = this.selectedDate.toISOString().split('T')[0];\n    return this.events[dateString] || [];\n  }\n  constructor(dialog, selectedDate) {\n    this.dialog = dialog;\n    this.selectedDate = selectedDate;\n    this.events = {\n      '2023-07-27': ['Event 1', 'Event 2'],\n      '2023-07-28': ['Event 3', 'Event 4']\n      // Add more events as needed...\n    };\n  }\n  // @ViewChild('fullcalendar') fullcalendar: any; // Get a reference to the calendar element\n  // calendarPlugins = [dayGridPlugin, interactionPlugin];\n  ngOnInit() {\n    // Fetch events from a service or local storage and populate the calendarEvents array\n    // For demonstration purposes, let's add a sample event:\n  }\n}\nScheduleDisplayComponent.ɵfac = function ScheduleDisplayComponent_Factory(t) {\n  return new (t || ScheduleDisplayComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(Date));\n};\nScheduleDisplayComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ScheduleDisplayComponent,\n  selectors: [[\"app-schedule-display\"]],\n  decls: 9,\n  vars: 2,\n  consts: [[2, \"text-align\", \"center\", \"font-family\", \"'Times New Roman', Times, serif\", \"font-weight\", \"bolder\", \"font-size\", \"50px\"], [3, \"selected\", \"selectedChange\"], [\"class\", \"events\", 4, \"ngIf\"], [1, \"events\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function ScheduleDisplayComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\", 0);\n      i0.ɵɵtext(1, \"Booking Schedule\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"mat-card\")(3, \"mat-card-header\")(4, \"mat-card-title\");\n      i0.ɵɵtext(5, \"Schedule\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"mat-card-content\")(7, \"mat-calendar\", 1);\n      i0.ɵɵlistener(\"selectedChange\", function ScheduleDisplayComponent_Template_mat_calendar_selectedChange_7_listener($event) {\n        return ctx.onDateSelected($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, ScheduleDisplayComponent_div_8_Template, 6, 4, \"div\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"selected\", ctx.selectedDate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.selectedDate);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.MatCalendar, i4.MatCard, i4.MatCardContent, i4.MatCardHeader, i4.MatCardTitle, i2.DatePipe],\n  styles: [\".calendar-container[_ngcontent-%COMP%] {\\r\\n    max-width: 800px;\\r\\n    margin: 0 auto;\\r\\n    padding: 20px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYm9va2luZy9zY2hlZHVsZS9zY2hlZHVsZS1kaXNwbGF5L3NjaGVkdWxlLWRpc3BsYXkuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkI7QUFDM0I7SUFDSSxnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGFBQWE7RUFDZiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGNhbGVuZGFyLmNvbXBvbmVudC5jc3MgKi9cclxuLmNhbGVuZGFyLWNvbnRhaW5lciB7XHJcbiAgICBtYXgtd2lkdGg6IDgwMHB4O1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":";;;;;;;IAgBQA,0BAAqD;IAAAA,YAAW;IAAAA,iBAAK;;;;IAAhBA,eAAW;IAAXA,8BAAW;;;;;IAHpEA,8BAAyC;IACnCA,YAAoC;;IAAAA,iBAAK;IAC7CA,0BAAI;IACFA,6EAAqE;IACvEA,iBAAK;;;;IAHDA,eAAoC;IAApCA,mFAAoC;IAEhBA,eAA6B;IAA7BA,2DAA6B;;;ACD3D,OAAM,MAAOC,wBAAwB;EAQnCC,cAAc,CAACC,YAAkB;IAC/B,IAAI,CAACA,YAAY,GAAGA,YAAY;EAClC;EAEAC,wBAAwB;IACtB,MAAMC,UAAU,GAAG,IAAI,CAACF,YAAY,CAACG,WAAW,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAChE,OAAO,IAAI,CAACC,MAAM,CAACH,UAAU,CAAC,IAAI,EAAE;EACtC;EAGAI,YAAoBC,MAAiB,EAAQP,YAAkB;IAA3C,WAAM,GAANO,MAAM;IAAmB,iBAAY,GAAZP,YAAY;IAhBzD,WAAM,GAAgC;MACpC,YAAY,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;MACpC,YAAY,EAAE,CAAC,SAAS,EAAE,SAAS;MACnC;KACD;EAYgE;EAIlE;EACC;EAGAQ,QAAQ;IACN;IACA;EAAA;;AA5BSV,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAW;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDfrChB,6BAAoH;MAAAA,gCAAgB;MAAAA,iBAAK;MAOzIA,gCAAU;MAEUA,wBAAQ;MAAAA,iBAAiB;MAE3CA,wCAAkB;MACwBA;QAAA,OAAkBiB,0BAAsB;MAAA,EAAC;MAACjB,iBAAe;MACjGA,yEAKM;MACRA,iBAAmB;;;MAPHA,eAAyB;MAAzBA,2CAAyB;MACjCA,eAAkB;MAAlBA,uCAAkB","names":["i0","ScheduleDisplayComponent","onDateSelected","selectedDate","getEventsForSelectedDate","dateString","toISOString","split","events","constructor","dialog","ngOnInit","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\schedule\\schedule-display\\schedule-display.component.html","C:\\Users\\User\\Documents\\GitHub\\370development-team-24\\Africanacity_Frontend\\src\\app\\booking\\schedule\\schedule-display\\schedule-display.component.ts"],"sourcesContent":["<h3 style=\"text-align: center; font-family: 'Times New Roman', Times, serif; font-weight: bolder; font-size: 50px;\">Booking Schedule</h3>\n\n\n<!-- <div class=\"calendar-container\">\n  <full-calendar [options]=\"calendarOptions\"></full-calendar>\n</div> -->\n<!-- schedule.component.html -->\n<mat-card>\n  <mat-card-header>\n    <mat-card-title>Schedule</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <mat-calendar [selected]=\"selectedDate\" (selectedChange)=\"onDateSelected($event)\"></mat-calendar>\n    <div *ngIf=\"selectedDate\" class=\"events\">\n      <h3>Events for {{ selectedDate | date }}</h3>\n      <ul>\n        <li *ngFor=\"let event of getEventsForSelectedDate()\">{{ event }}</li>\n      </ul>\n    </div>\n  </mat-card-content>\n</mat-card>\n","import { Component, ViewChild, OnInit } from '@angular/core';\nimport { CalendarOptions } from '@fullcalendar/core';\nimport dayGridPlugin from '@fullcalendar/daygrid'; // Import the dayGrid plugin\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { AddScheduleComponent } from '../add-schedule/add-schedule.component';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { DataService } from 'src/app/service/data.Service';\n\n\n@Component({\n  selector: 'app-schedule-display',\n  templateUrl: './schedule-display.component.html',\n  styleUrls: ['./schedule-display.component.css']\n})\n\nexport class ScheduleDisplayComponent implements OnInit {\n\n  events: { [key: string]: string[] } = {\n    '2023-07-27': ['Event 1', 'Event 2'],\n    '2023-07-28': ['Event 3', 'Event 4'],\n    // Add more events as needed...\n  };\n\n  onDateSelected(selectedDate: Date): void {\n    this.selectedDate = selectedDate;\n  }\n\n  getEventsForSelectedDate(): string[] {\n    const dateString = this.selectedDate.toISOString().split('T')[0];\n    return this.events[dateString] || [];\n  }\n \n\n  constructor(private dialog: MatDialog,public selectedDate: Date){}\n\n   private dialogRef: any;\n\n // @ViewChild('fullcalendar') fullcalendar: any; // Get a reference to the calendar element\n  // calendarPlugins = [dayGridPlugin, interactionPlugin];\n  \n  \n  ngOnInit() {\n    // Fetch events from a service or local storage and populate the calendarEvents array\n    // For demonstration purposes, let's add a sample event:\n \n  }\n\n  // calendarOptions: CalendarOptions = {\n  //   initialView: 'dayGridMonth',\n  //   plugins: [dayGridPlugin, interactionPlugin],\n  //   dateClick: this.onDateClick.bind(this),\n  // };\n\n  // onDateClick(date: { dateStr: string }) {\n  //   // Open the MatDialog and store the reference in dialogRef\n  //   this.dialogRef = this.dialog.open(AddScheduleComponent, {\n  //     width: '400px',\n  //     data: date.dateStr, // Pass the selected dateStr to the dialog component if needed\n  //     // You can also provide other MatDialog configuration options here\n  //   });\n  // }\n\n \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}