{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { InventoryItem } from 'src/app/shared/inventoryitem';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/service/supplier.service\";\nimport * as i3 from \"src/app/service/inventory.service\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/common\";\nfunction ReceiveOrderComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Please enter a valid item ID.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ReceiveOrderComponent_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const supplier_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", supplier_r5.supplierId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(supplier_r5.supplierName);\n  }\n}\nfunction ReceiveOrderComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Please select a supplier.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ReceiveOrderComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Please enter the ordered date.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ReceiveOrderComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Please enter a valid quantity (minimum 1).\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ReceiveOrderComponent {\n  constructor(route, supplierservice, inventoryservice, httpClient, fb) {\n    this.route = route;\n    this.supplierservice = supplierservice;\n    this.inventoryservice = inventoryservice;\n    this.httpClient = httpClient;\n    this.fb = fb;\n    this.supplierData = [];\n    this.inventoryItems = [];\n    this.editInventory = new InventoryItem();\n  }\n  ngOnInit() {\n    this.receiveOrderForm = this.fb.group({\n      inventoryItem: ['', Validators.required],\n      supplierId: ['', Validators.required],\n      ordered_Date: ['', Validators.required],\n      received_Date: [new Date().toISOString().slice(0, 10)],\n      ordered_Quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.GetAllSuppliers();\n    //this.GetAllInventoryItems();\n    // Retrieve the selected inventory item ID from the query parameters\n    // this.route.params.subscribe(params => { \n    //   this.inventoryservice.GetInventoryItem(params['id']).subscribe(res => { \n    //   this.editInventory = res as InventoryItem;\n    //   this.receiveOrderForm.controls['itemName'].setValue(this.editInventory.itemName);\n    //   })\n    //  })\n    this.receiveOrderForm.controls['inventoryItem'].valueChanges.subscribe(itemId => {\n      if (itemId) {\n        // Retrieve the inventory item from the checklist component using the ID\n        const selectedInventoryItem = this.inventoryItems.find(item => item.inventory_ItemId === itemId);\n        if (selectedInventoryItem) {\n          // Set the inventory item name in the form\n          this.receiveOrderForm.controls['inventoryItem'].setValue(selectedInventoryItem.itemName);\n        } else {\n          // Clear the inventory item name if the item ID is not found\n          this.receiveOrderForm.controls['inventoryItem'].setValue('');\n        }\n      } else {\n        // Clear the inventory item name if the input is empty\n        this.receiveOrderForm.controls['inventoryItem'].setValue('');\n      }\n    });\n  }\n  GetAllSuppliers() {\n    this.supplierservice.GetAllSuppliers().subscribe(result => {\n      let supplierList = result;\n      supplierList.forEach(element => {\n        this.supplierData.push(element);\n      });\n    });\n  }\n  // GetAllInventoryItems(){\n  //   this.inventoryservice.GetAllInventoryItems().subscribe(result => {\n  //     let itemsList:any[] = result\n  //     itemsList.forEach((element) => {\n  //       this.supplierData.push(element)\n  //    });\n  //   });\n  // }\n  onSubmit() {\n    if (this.receiveOrderForm.valid) {\n      const formData = this.receiveOrderForm.value;\n      this.httpClient.post('/api/InventoryItem/AddReceivedOrder', formData).subscribe(response => {\n        // Handle successful response\n        console.log('Order received successfully:', response);\n      }, error => {\n        // Handle error\n        console.error('Error receiving order:', error);\n      });\n    }\n  }\n}\nReceiveOrderComponent.ɵfac = function ReceiveOrderComponent_Factory(t) {\n  return new (t || ReceiveOrderComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.SupplierService), i0.ɵɵdirectiveInject(i3.InventoryService), i0.ɵɵdirectiveInject(i4.HttpClient), i0.ɵɵdirectiveInject(i5.FormBuilder));\n};\nReceiveOrderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReceiveOrderComponent,\n  selectors: [[\"app-receive-order\"]],\n  decls: 32,\n  vars: 8,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"inventoryItem\"], [\"type\", \"text\", \"formControlName\", \"inventoryItem\"], [4, \"ngIf\"], [\"for\", \"supplierId\"], [\"formControlName\", \"supplierId\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"ordered_Date\"], [\"type\", \"date\", \"formControlName\", \"ordered_Date\"], [\"for\", \"received_Date\"], [\"type\", \"date\", \"formControlName\", \"received_Date\", 3, \"readonly\"], [\"for\", \"ordered_Quantity\"], [\"type\", \"number\", \"formControlName\", \"ordered_Quantity\", \"min\", \"1\"], [\"type\", \"submit\", 3, \"disabled\"], [3, \"value\"]],\n  template: function ReceiveOrderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Receive Order\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ReceiveOrderComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\")(4, \"label\", 1);\n      i0.ɵɵtext(5, \"Enter Inventory Item ID:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 2);\n      i0.ɵɵtemplate(7, ReceiveOrderComponent_div_7_Template, 2, 0, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\")(9, \"label\", 4);\n      i0.ɵɵtext(10, \"Select Supplier:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"select\", 5)(12, \"option\", 6);\n      i0.ɵɵtext(13, \"-- Select a supplier --\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, ReceiveOrderComponent_option_14_Template, 2, 2, \"option\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(15, ReceiveOrderComponent_div_15_Template, 2, 0, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\")(17, \"label\", 8);\n      i0.ɵɵtext(18, \"Ordered Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(19, \"input\", 9);\n      i0.ɵɵtemplate(20, ReceiveOrderComponent_div_20_Template, 2, 0, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"div\")(22, \"label\", 10);\n      i0.ɵɵtext(23, \"Received Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"div\")(26, \"label\", 12);\n      i0.ɵɵtext(27, \"Ordered Quantity:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(28, \"input\", 13);\n      i0.ɵɵtemplate(29, ReceiveOrderComponent_div_29_Template, 2, 0, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(30, \"button\", 14);\n      i0.ɵɵtext(31, \"Receive Order\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.receiveOrderForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.receiveOrderForm.get(\"inventoryItem\") && ctx.receiveOrderForm.get(\"inventoryItem\"));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngForOf\", ctx.supplierData);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.receiveOrderForm.get(\"supplierId\"));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.receiveOrderForm.get(\"ordered_Date\"));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"readonly\", true);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.receiveOrderForm.get(\"ordered_Quantity\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.receiveOrderForm.invalid);\n    }\n  },\n  dependencies: [i6.NgForOf, i6.NgIf, i5.ɵNgNoValidate, i5.NgSelectOption, i5.ɵNgSelectMultipleOption, i5.DefaultValueAccessor, i5.NumberValueAccessor, i5.SelectControlValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.MinValidator, i5.FormGroupDirective, i5.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","InventoryItem","i0","ReceiveOrderComponent","constructor","route","supplierservice","inventoryservice","httpClient","fb","ngOnInit","receiveOrderForm","group","inventoryItem","required","supplierId","ordered_Date","received_Date","Date","toISOString","slice","ordered_Quantity","min","GetAllSuppliers","controls","valueChanges","subscribe","itemId","selectedInventoryItem","inventoryItems","find","item","inventory_ItemId","setValue","itemName","result","supplierList","forEach","element","supplierData","push","onSubmit","valid","formData","value","post","response","console","log","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Inventory Management\\Inventory Items\\receive-order\\receive-order.component.ts","C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Inventory Management\\Inventory Items\\receive-order\\receive-order.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms'; // Import the ReactiveFormsModule\nimport { ActivatedRoute } from '@angular/router';\nimport { InventoryService } from 'src/app/service/inventory.service';\nimport { SupplierService } from 'src/app/service/supplier.service';\nimport { InventoryItem } from 'src/app/shared/inventoryitem';\nimport { Supplier } from 'src/app/shared/supplier';\n\n\n@Component({\n  selector: 'app-receive-order',\n  templateUrl: './receive-order.component.html',\n  styleUrls: ['./receive-order.component.css']\n})\nexport class ReceiveOrderComponent {\n\n  supplierData: Supplier[] = [];\n  inventoryItems: InventoryItem[] = [];\n  receiveOrderForm!: FormGroup;\n  editInventory: InventoryItem = new InventoryItem();\n\n  constructor(\n    private route: ActivatedRoute,\n    private supplierservice: SupplierService,\n    private inventoryservice: InventoryService,\n    private httpClient: HttpClient,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void{\n    this.receiveOrderForm = this.fb.group({\n      inventoryItem: ['', Validators.required],\n      supplierId: ['', Validators.required],\n      ordered_Date: ['', Validators.required],\n      received_Date: [new Date().toISOString().slice(0, 10)],\n      ordered_Quantity: ['', [Validators.required, Validators.min(1)]]\n    });\n\n    this.GetAllSuppliers();\n\n    //this.GetAllInventoryItems();\n\n    // Retrieve the selected inventory item ID from the query parameters\n    // this.route.params.subscribe(params => { \n    //   this.inventoryservice.GetInventoryItem(params['id']).subscribe(res => { \n    //   this.editInventory = res as InventoryItem;\n\n    //   this.receiveOrderForm.controls['itemName'].setValue(this.editInventory.itemName);\n    //   })\n \n    //  })\n    this.receiveOrderForm.controls['inventoryItem'].valueChanges.subscribe((itemId) => {\n      if (itemId) {\n        // Retrieve the inventory item from the checklist component using the ID\n        const selectedInventoryItem = this.inventoryItems.find(item => item.inventory_ItemId === itemId);\n        if (selectedInventoryItem) {\n          // Set the inventory item name in the form\n          this.receiveOrderForm.controls['inventoryItem'].setValue(selectedInventoryItem.itemName);\n        } else {\n          // Clear the inventory item name if the item ID is not found\n          this.receiveOrderForm.controls['inventoryItem'].setValue('');\n        }\n      } else {\n        // Clear the inventory item name if the input is empty\n        this.receiveOrderForm.controls['inventoryItem'].setValue('');\n      }\n    });\n  }\n\n  GetAllSuppliers(){\n    this.supplierservice.GetAllSuppliers().subscribe(result => {\n      let supplierList:any[] = result\n      supplierList.forEach((element) => {\n        this.supplierData.push(element)\n     });\n    });\n  }\n  // GetAllInventoryItems(){\n  //   this.inventoryservice.GetAllInventoryItems().subscribe(result => {\n  //     let itemsList:any[] = result\n  //     itemsList.forEach((element) => {\n  //       this.supplierData.push(element)\n  //    });\n  //   });\n  // }\n\n  onSubmit() {\n    if (this.receiveOrderForm.valid) {\n      const formData = this.receiveOrderForm.value;\n      this.httpClient.post('/api/InventoryItem/AddReceivedOrder', formData).subscribe(\n        (response: any) => {\n          // Handle successful response\n          console.log('Order received successfully:', response);\n        },\n        (error: any) => {\n          // Handle error\n          console.error('Error receiving order:', error);\n        }\n      );\n    }\n  }\n\n}\n","<h1>Receive Order</h1>\n<form [formGroup]=\"receiveOrderForm\" (ngSubmit)=\"onSubmit()\">\n  <div>\n    <label for=\"inventoryItem\">Enter Inventory Item ID:</label>\n    <input type=\"text\" formControlName=\"inventoryItem\">\n    <div *ngIf=\"receiveOrderForm.get('inventoryItem') && receiveOrderForm.get('inventoryItem')\">Please enter a valid item ID.</div>\n  </div>\n\n  <div>\n    <label for=\"supplierId\">Select Supplier:</label>\n    <select formControlName=\"supplierId\">\n      <option value=\"\">-- Select a supplier --</option>\n      <!-- Populate the options with suppliers from the backend -->\n      <option *ngFor=\"let supplier of supplierData\" [value]=\"supplier.supplierId\">{{ supplier.supplierName }}</option>\n    </select>\n    <div *ngIf=\"receiveOrderForm.get('supplierId')\">Please select a supplier.</div>\n  </div>\n\n  <div>\n    <label for=\"ordered_Date\">Ordered Date:</label>\n    <input type=\"date\" formControlName=\"ordered_Date\">\n    <div *ngIf=\"receiveOrderForm.get('ordered_Date')\">Please enter the ordered date.</div>\n  </div>\n\n  <div>\n    <label for=\"received_Date\">Received Date:</label>\n    <input type=\"date\" formControlName=\"received_Date\" [readonly]=\"true\">\n  </div>\n\n  <div>\n    <label for=\"ordered_Quantity\">Ordered Quantity:</label>\n    <input type=\"number\" formControlName=\"ordered_Quantity\" min=\"1\">\n    <div *ngIf=\"receiveOrderForm.get('ordered_Quantity')\">Please enter a valid quantity (minimum 1).</div>\n  </div>\n\n  <button type=\"submit\" [disabled]=\"receiveOrderForm.invalid\">Receive Order</button>\n</form>\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}