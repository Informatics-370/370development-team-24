{"ast":null,"code":"// stocktake.component.ts\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet StocktakeComponent = class StocktakeComponent {\n  constructor(inventoryService, snackBar) {\n    this.inventoryService = inventoryService;\n    this.snackBar = snackBar;\n    this.inventoryItems = [];\n    this.stockTakeData = [];\n  }\n  ngOnInit() {\n    this.getInventoryItems();\n  }\n  getInventoryItems() {\n    // Call the API to get the list of inventory items\n    this.inventoryService.GetAllInventoryItems().subscribe(items => {\n      this.inventoryItems = items;\n      // Initialize the stockTakeQuantity property for each inventory item\n      this.stockTakeData = this.inventoryItems.map(item => ({\n        inventory_ItemId: item.inventory_ItemId,\n        stockTakeQuantity: 0\n      }));\n    }, error => {\n      console.error('Failed to fetch inventory items:', error);\n    });\n  }\n  incrementQuantity(item) {\n    const data = this.stockTakeData.find(d => d.inventory_ItemId === item.inventory_ItemId);\n    if (data) {\n      data.stockTakeQuantity++;\n    }\n  }\n  decrementQuantity(item) {\n    const data = this.stockTakeData.find(d => d.inventory_ItemId === item.inventory_ItemId);\n    if (data && data.stockTakeQuantity > 0) {\n      data.stockTakeQuantity--;\n    }\n  }\n  submitStockTake() {\n    // Call the API to submit the stock take data to the backend\n    this.inventoryService.submitStockTake(this.stockTakeData).subscribe(() => {\n      this.snackBar.open('Stock take data submitted successfully!', 'Close', {\n        duration: 3000\n      });\n    }, error => {\n      console.error('Failed to submit stock take data:', error);\n      this.snackBar.open('Failed to submit stock take data', 'Close', {\n        duration: 3000\n      });\n    });\n  }\n};\nStocktakeComponent = __decorate([Component({\n  selector: 'app-stocktake',\n  templateUrl: './stocktake.component.html',\n  styleUrls: ['./stocktake.component.css']\n})], StocktakeComponent);\nexport { StocktakeComponent };","map":{"version":3,"mappings":"AAAA;;AAEA,SAASA,SAAS,QAAQ,eAAe;AAWlC,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAI7BC,YACUC,gBAAkC,EAClCC,QAAqB;IADrB,qBAAgB,GAAhBD,gBAAgB;IAChB,aAAQ,GAARC,QAAQ;IALlB,mBAAc,GAAoB,EAAE;IACpC,kBAAa,GAAoB,EAAE;EAKhC;EAEHC,QAAQ;IACN,IAAI,CAACC,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiB;IACf;IACA,IAAI,CAACH,gBAAgB,CAACI,oBAAoB,EAAE,CAACC,SAAS,CACnDC,KAAK,IAAI;MACR,IAAI,CAACC,cAAc,GAAGD,KAAK;MAC3B;MACA,IAAI,CAACE,aAAa,GAAG,IAAI,CAACD,cAAc,CAACE,GAAG,CAAEC,IAAI,KAAM;QACtDC,gBAAgB,EAAED,IAAI,CAACC,gBAAgB;QACvCC,iBAAiB,EAAE;OACpB,CAAC,CAAC;IACL,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D,CAAC,CACF;EACH;EAEAE,iBAAiB,CAACL,IAAmB;IACnC,MAAMM,IAAI,GAAG,IAAI,CAACR,aAAa,CAACS,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACP,gBAAgB,KAAKD,IAAI,CAACC,gBAAgB,CAAC;IACzF,IAAIK,IAAI,EAAE;MACRA,IAAI,CAACJ,iBAAiB,EAAE;;EAE5B;EAEAO,iBAAiB,CAACT,IAAmB;IACnC,MAAMM,IAAI,GAAG,IAAI,CAACR,aAAa,CAACS,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACP,gBAAgB,KAAKD,IAAI,CAACC,gBAAgB,CAAC;IACzF,IAAIK,IAAI,IAAIA,IAAI,CAACJ,iBAAiB,GAAG,CAAC,EAAE;MACtCI,IAAI,CAACJ,iBAAiB,EAAE;;EAE5B;EAEAQ,eAAe;IACb;IACA,IAAI,CAACpB,gBAAgB,CAACoB,eAAe,CAAC,IAAI,CAACZ,aAAa,CAAC,CAACH,SAAS,CACjE,MAAK;MACH,IAAI,CAACJ,QAAQ,CAACoB,IAAI,CAAC,yCAAyC,EAAE,OAAO,EAAE;QACrEC,QAAQ,EAAE;OACX,CAAC;IACJ,CAAC,EACAT,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,IAAI,CAACZ,QAAQ,CAACoB,IAAI,CAAC,kCAAkC,EAAE,OAAO,EAAE;QAC9DC,QAAQ,EAAE;OACX,CAAC;IACJ,CAAC,CACF;EACH;CACD;AA5DYxB,kBAAkB,eAL9BD,SAAS,CAAC;EACT0B,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACW3B,kBAAkB,CA4D9B;SA5DYA,kBAAkB","names":["Component","StocktakeComponent","constructor","inventoryService","snackBar","ngOnInit","getInventoryItems","GetAllInventoryItems","subscribe","items","inventoryItems","stockTakeData","map","item","inventory_ItemId","stockTakeQuantity","error","console","incrementQuantity","data","find","d","decrementQuantity","submitStockTake","open","duration","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Inventory Management\\Inventory Items\\stocktake\\stocktake.component.ts"],"sourcesContent":["// stocktake.component.ts\n\nimport { Component } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { InventoryService } from 'src/app/service/inventory.service';\nimport { InventoryItem } from 'src/app/shared/inventoryitem';\n\n\n@Component({\n  selector: 'app-stocktake',\n  templateUrl: './stocktake.component.html',\n  styleUrls: ['./stocktake.component.css']\n})\nexport class StocktakeComponent {\n  inventoryItems: InventoryItem[] = [];\n  stockTakeData: StockTakeItem[] = [];\n\n  constructor(\n    private inventoryService: InventoryService,\n    private snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {\n    this.getInventoryItems();\n  }\n\n  getInventoryItems(): void {\n    // Call the API to get the list of inventory items\n    this.inventoryService.GetAllInventoryItems().subscribe(\n      (items) => {\n        this.inventoryItems = items;\n        // Initialize the stockTakeQuantity property for each inventory item\n        this.stockTakeData = this.inventoryItems.map((item) => ({\n          inventory_ItemId: item.inventory_ItemId,\n          stockTakeQuantity: 0\n        }));\n      },\n      (error) => {\n        console.error('Failed to fetch inventory items:', error);\n      }\n    );\n  }\n\n  incrementQuantity(item: InventoryItem): void {\n    const data = this.stockTakeData.find((d) => d.inventory_ItemId === item.inventory_ItemId);\n    if (data) {\n      data.stockTakeQuantity++;\n    }\n  }\n\n  decrementQuantity(item: InventoryItem): void {\n    const data = this.stockTakeData.find((d) => d.inventory_ItemId === item.inventory_ItemId);\n    if (data && data.stockTakeQuantity > 0) {\n      data.stockTakeQuantity--;\n    }\n  }\n\n  submitStockTake(): void {\n    // Call the API to submit the stock take data to the backend\n    this.inventoryService.submitStockTake(this.stockTakeData).subscribe(\n      () => {\n        this.snackBar.open('Stock take data submitted successfully!', 'Close', {\n          duration: 3000\n        });\n      },\n      (error: any) => {\n        console.error('Failed to submit stock take data:', error);\n        this.snackBar.open('Failed to submit stock take data', 'Close', {\n          duration: 3000\n        });\n      }\n    );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}