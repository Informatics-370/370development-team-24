{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/service/supplier.service\";\nexport class ReceiveOrderComponent {\n  constructor(http, supplierservice) {\n    this.http = http;\n    this.supplierservice = supplierservice;\n    this.supplierData = [];\n    this.receiveOrderForm = new FormGroup({\n      inventoryItemId: new FormControl('', Validators.required),\n      supplierId: new FormControl('', Validators.required),\n      ordered_Date: new FormControl('', Validators.required),\n      received_Date: new FormControl(new Date().toISOString().slice(0, 10)),\n      ordered_Quantity: new FormControl('', [Validators.required, Validators.min(1)])\n    });\n  }\n  GetAllSuppliers() {\n    this.supplierservice.GetAllSupplierTypes().subscribe(result => {\n      let supplierTypeList = result;\n      supplierTypeList.forEach(element => {\n        this.supplierData.push(element);\n      });\n    });\n  }\n  onSubmit() {\n    if (this.receiveOrderForm.valid) {\n      const formData = this.receiveOrderForm.value;\n      this.http.post('/api/InventoryItem/AddReceivedOrder', formData).subscribe(response => {\n        // Handle successful response\n        console.log('Order received successfully:', response);\n      }, error => {\n        // Handle error\n        console.error('Error receiving order:', error);\n      });\n    }\n  }\n}\nReceiveOrderComponent.ɵfac = function ReceiveOrderComponent_Factory(t) {\n  return new (t || ReceiveOrderComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.SupplierService));\n};\nReceiveOrderComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReceiveOrderComponent,\n  selectors: [[\"app-receive-order\"]],\n  decls: 0,\n  vars: 0,\n  template: function ReceiveOrderComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;AAWnE,OAAM,MAAOC,qBAAqB;EAMhCC,YAAoBC,IAAgB,EAAUC,eAAgC;IAA1D,SAAI,GAAJD,IAAI;IAAsB,oBAAe,GAAfC,eAAe;IAJ7D,iBAAY,GAAY,EAAE;IAKxB,IAAI,CAACC,gBAAgB,GAAG,IAAIN,SAAS,CAAC;MACpCO,eAAe,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACO,QAAQ,CAAC;MACzDC,UAAU,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACO,QAAQ,CAAC;MACpDE,YAAY,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACO,QAAQ,CAAC;MACtDG,aAAa,EAAE,IAAIZ,WAAW,CAAC,IAAIa,IAAI,EAAE,CAACC,WAAW,EAAE,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;MACrEC,gBAAgB,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACe,GAAG,CAAC,CAAC,CAAC,CAAC;KAC/E,CAAC;EACJ;EACAC,eAAe;IACb,IAAI,CAACZ,eAAe,CAACa,mBAAmB,EAAE,CAACC,SAAS,CAACC,MAAM,IAAG;MAC5D,IAAIC,gBAAgB,GAASD,MAAM;MACnCC,gBAAgB,CAACC,OAAO,CAAEC,OAAO,IAAI;QACnC,IAAI,CAACC,YAAY,CAACC,IAAI,CAACF,OAAO,CAAC;MAClC,CAAC,CAAC;IACH,CAAC,CAAC;EACJ;EAEAG,QAAQ;IACN,IAAI,IAAI,CAACpB,gBAAgB,CAACqB,KAAK,EAAE;MAC/B,MAAMC,QAAQ,GAAG,IAAI,CAACtB,gBAAgB,CAACuB,KAAK;MAC5C,IAAI,CAACzB,IAAI,CAAC0B,IAAI,CAAC,qCAAqC,EAAEF,QAAQ,CAAC,CAACT,SAAS,CACtEY,QAAQ,IAAI;QACX;QACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,QAAQ,CAAC;MACvD,CAAC,EACAG,KAAK,IAAI;QACR;QACAF,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD,CAAC,CACF;;EAEL;;AAtCWhC,qBAAqB;mBAArBA,qBAAqB;AAAA;AAArBA,qBAAqB;QAArBA,qBAAqB;EAAAiC;EAAAC;EAAAC;EAAAC;EAAAC;AAAA","names":["FormControl","FormGroup","Validators","ReceiveOrderComponent","constructor","http","supplierservice","receiveOrderForm","inventoryItemId","required","supplierId","ordered_Date","received_Date","Date","toISOString","slice","ordered_Quantity","min","GetAllSuppliers","GetAllSupplierTypes","subscribe","result","supplierTypeList","forEach","element","supplierData","push","onSubmit","valid","formData","value","post","response","console","log","error","selectors","decls","vars","template","styles"],"sourceRoot":"","sources":["C:\\Users\\Lavania Naidoo\\Desktop\\370development-team-24\\Africanacity_Frontend\\src\\app\\administration\\Inventory Management\\Inventory Items\\receive-order\\receive-order.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms'; // Import the ReactiveFormsModule\nimport { SupplierService } from 'src/app/service/supplier.service';\nimport { Supplier } from 'src/app/shared/supplier';\n\n\n@Component({\n  selector: 'app-receive-order',\n  templateUrl: './receive-order.component.html',\n  styleUrls: ['./receive-order.component.css']\n})\nexport class ReceiveOrderComponent {\n\n  supplierData:Supplier[]=[]\n  \n  receiveOrderForm: FormGroup;\n\n  constructor(private http: HttpClient, private supplierservice: SupplierService ) {\n    this.receiveOrderForm = new FormGroup({\n      inventoryItemId: new FormControl('', Validators.required),\n      supplierId: new FormControl('', Validators.required),\n      ordered_Date: new FormControl('', Validators.required),\n      received_Date: new FormControl(new Date().toISOString().slice(0, 10)), // Set the received date to the current date\n      ordered_Quantity: new FormControl('', [Validators.required, Validators.min(1)])\n    });\n  }\n  GetAllSuppliers(){\n    this.supplierservice.GetAllSupplierTypes().subscribe(result => {\n      let supplierTypeList:any[] = result\n      supplierTypeList.forEach((element) => {\n        this.supplierData.push(element)\n     });\n    });\n  }\n\n  onSubmit() {\n    if (this.receiveOrderForm.valid) {\n      const formData = this.receiveOrderForm.value;\n      this.http.post('/api/InventoryItem/AddReceivedOrder', formData).subscribe(\n        (response) => {\n          // Handle successful response\n          console.log('Order received successfully:', response);\n        },\n        (error) => {\n          // Handle error\n          console.error('Error receiving order:', error);\n        }\n      );\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}