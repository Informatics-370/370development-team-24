{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/service/data.Service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../../navbar/navbar.component\";\nfunction MenuitemsComponent_tr_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\")(14, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function MenuitemsComponent_tr_19_Template_button_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const menuItem_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.deleteMenuItem(menuItem_r1.menuItem_Id));\n    });\n    i0.ɵɵtext(15, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const menuItem_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.menuItem_Id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.foodTypeName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.menuTypeName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(menuItem_r1.menuCategoryName);\n  }\n}\nexport let MenuitemsComponent = /*#__PURE__*/(() => {\n  class MenuitemsComponent {\n    constructor(dataService, router, http, snackBar) {\n      this.dataService = dataService;\n      this.router = router;\n      this.http = http;\n      this.snackBar = snackBar;\n      this.menuItems = [];\n    }\n    ngOnInit() {\n      this.GetAllMenuItems();\n      console.log(this.menuItems);\n    }\n    /*************************** MENU ITEM ************/\n    /**Get all menu items** */\n    GetAllMenuItems() {\n      this.dataService.GetAllMenuItems().subscribe(menuItems => {\n        this.menuItems = menuItems;\n        // this.loadAssociatedNames();\n      }, error => {\n        console.error(error);\n      });\n    }\n    /*GetAllMenuItems() {\r\n      this.dataService.GetAllMenuItems().subscribe(result => {\r\n        let menuItemList:any[] = result\r\n        menuItemList.forEach((element) => {\r\n          this.menuItems.push(element);\r\n          \r\n          \r\n        });\r\n      })\r\n    }*/\n    /*GetAllMenuItems(): void {\r\n      this.http.get<MenuItem[]>('/MenuItems/GetAllMenuItems').subscribe(\r\n        (response) => {\r\n          this.menuItems = response;\r\n          this.loadAssociatedNames();\r\n        },\r\n        (error) => {\r\n          console.error('Failed to fetch menu items:', error);\r\n        }\r\n      );\r\n    }*/\n    // loadAssociatedNames(): void {\n    //   for (const menuItem of this.menuItems) {\n    //     this.getFoodTypeName(menuItem.foodTypeId);\n    //     this.getMenuItemCategoryName(menuItem.menuItemCategory_Id);\n    //     this.getFoodTypeName(menuItem.menu_TypeId);\n    //   }\n    // }\n    /*loadMenuTypeName(menuItem: MenuTypes): void {\r\n      this.http.get<any>(`api/MenuType/GetAllMenuTypes${menuItem.name}`).subscribe(\r\n        (response) => {\r\n          menuItem.name = response.name;\r\n        },\r\n        (error) => {\r\n          console.error('Failed to fetch menu type name:', error);\r\n        }\r\n      );\r\n    }*/\n    // getFoodTypeName(foodTypeId: number): void {\n    //   this.dataService.GetFoodTypeById(foodTypeId).subscribe(\n    //     (foodType) => {\n    //       const foundFoodType = this.foodTypes.find((ft) => ft.foodTypeId == foodType.foodTypeId);\n    //       if (foundFoodType) {\n    //         foundFoodType.name = foodType.name;\n    //       } else {\n    //         this.foodTypes.push(foodType);\n    //       }\n    //     },\n    //     (error) => {\n    //       console.error('Failed to fetch food type name:', error);\n    //     }\n    //   );\n    // }\n    // getMenuItemCategoryName(categoryId: number): void {\n    //   this.dataService.GetMenuItemCategoryById(categoryId).subscribe(\n    //     (menuItemCategory) => {\n    //       const foundCategory = this.menuCategories.find((mc) => mc.MenuItemCategoryId == menuItemCategory.category_Id);\n    //       if (foundCategory) {\n    //         foundCategory.name = menuItemCategory.name;\n    //       } else {\n    //         this.menuCategories.push(menuItemCategory);\n    //       }\n    //     },\n    //     (error) => {\n    //       console.error('Failed to fetch menu category name:', error);\n    //     }\n    //   );\n    // }\n    // getMenuTypeName(menuTypeId: number): void {\n    //   this.dataService.GetMenuTypeById(menuTypeId).subscribe(\n    //     (menuType) => {\n    //       const foundMenuType = this.menuTypes.find((mt) => mt.menu_TypeId == menuType.menu_TypeId);\n    //       if (foundMenuType) {\n    //         foundMenuType.name = menuType.name;\n    //       } else {\n    //         this.menuTypes.push(menuType);\n    //       }\n    //     },\n    //     (error) => {\n    //       console.error('Failed to fetch menu type name:', error);\n    //     }\n    //   );\n    // }\n    deleteItem() {\n      const confirmationSnackBar = this.snackBar.open('Are you sure you want to delete the menu type?', 'Delete', {\n        duration: 5000\n      });\n      confirmationSnackBar.onAction().subscribe(() => {\n        this.deleteItemFromServer();\n        window.location.reload();\n      });\n    }\n    deleteItemFromServer() {\n      this.deleteMenuItem;\n    }\n    deleteMenuItem(menu_ItemId) {\n      this.dataService.deleteMenuType(menu_ItemId).subscribe(result => {\n        this.deleteItem();\n      });\n    }\n  }\n  MenuitemsComponent.ɵfac = function MenuitemsComponent_Factory(t) {\n    return new (t || MenuitemsComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.HttpClient), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n  };\n  MenuitemsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MenuitemsComponent,\n    selectors: [[\"app-menuitems\"]],\n    decls: 20,\n    vars: 1,\n    consts: [[1, \"container-fluid\"], [1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-10\", \"order-md-1\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"]],\n    template: function MenuitemsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"app-navbar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"table\")(6, \"tr\")(7, \"th\");\n        i0.ɵɵtext(8, \"ID\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"th\");\n        i0.ɵɵtext(10, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"th\");\n        i0.ɵɵtext(12, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"th\");\n        i0.ɵɵtext(14, \"FoodType\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"th\");\n        i0.ɵɵtext(16, \"MenuType\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"th\");\n        i0.ɵɵtext(18, \"MenuCategory\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(19, MenuitemsComponent_tr_19_Template, 16, 6, \"tr\", 4);\n        i0.ɵɵelementEnd()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(19);\n        i0.ɵɵproperty(\"ngForOf\", ctx.menuItems);\n      }\n    },\n    dependencies: [i5.NgForOf, i6.NavbarComponent]\n  });\n  return MenuitemsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}