import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApiService } from 'src/app/UserService/api.service';
import { DataService } from 'src/app/service/data.Service';
import { Profile } from 'src/app/shared/Profile';
import { Entertainment_Type } from 'src/app/shared/entertainmentType';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { saveAs } from 'file-saver';
import { UserStoreService } from 'src/app/UserService/user-store.service';
import { AuthService } from 'src/app/UserService/auth.service';

@Component({
  selector: 'app-entertainer',
  templateUrl: './entertainer.component.html',
  styleUrls: ['./entertainer.component.css']
})
export class EntertainerReportComponent implements OnInit{
  entertainers: Profile [] =[];
  entertainmentTypes: Entertainment_Type[] = [];
  filteredEntertainers: Profile[] = [];
  userName: string = "";

  isFilterActive = false;

  constructor(private http: HttpClient, 
    private apiService: ApiService, 
    private dataService: DataService,
    private userService: UserStoreService,
    private auth: AuthService) 
  { }

  ngOnInit(): void {
      this.fetchData();
  }

  fetchData()
  {
    this.dataService.GetEntertainmentTypes().subscribe(result => {
      this.entertainmentTypes = result;
      this.GetAllEntertainers();
    })
  }

  GetAllEntertainers()
  {
    this.apiService.GetUsers().subscribe(result =>
      this.entertainers = result)
  }

  // Filter by entertainment type
  filterByType(type: string)
  {
    if (type === 'all')
    {
      this.isFilterActive = false;
    }
    else
    {
      this.filteredEntertainers = this.entertainers.filter(item => item.entertainmentTypeName === type);
      this.isFilterActive = true;
    }
  }

  // Download PDF
  downloadPDF() {
    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text('Entertainer Report', 105, 25, { align: 'center' });
  
    // Add logo to the top left corner of the first page
    const logoImageUrl = 'assets/Pictures/Logo Black.png'; 
    const logoWidth = 10; 
    const logoHeight = 10; 
    doc.addImage(logoImageUrl, 'PNG', 100, 5, logoWidth, logoHeight);

    // Get the current date
    const currentDate = this.formatDate(new Date());
    const pageWidth = doc.internal.pageSize.getWidth();
    doc.setFontSize(10);
    doc.text(`Downloaded on: ${currentDate}`, pageWidth - 70, 10);

    // Add user name to report
    this.userService.getFullNameFromStore()
    .subscribe(val=>{
      const fullNameFromToken = this.auth.getfullNameFromToken();
      this.userName = val || fullNameFromToken
    });

    doc.setFontSize(10);
    doc.text(`Generated by: ${this.userName}`, pageWidth - 70, 15 )

    const headers = [['', 'Name', 'Surname', 'Type', 'Email Address', 'Phone Number']];
    
    // Default: Display all employees
    let entertainersToDisplay = this.entertainers; 
  
    // Display filtered employees
    if (this.isFilterActive) {
      entertainersToDisplay = this.filteredEntertainers; 
    }

    const data = entertainersToDisplay.map(entertainer => [
      entertainer.id,
      entertainer.firstName,
      entertainer.lastName,
      entertainer.entertainmentTypeName,
      entertainer.email,
      entertainer.contactNumber,
    ]);
  
    doc.setFontSize(12);

    // Adjust the Y position to leave space below the logo
    let startY = 40; 
  
    // Generate headers
    doc.autoTable({
      head: [headers],
      //margin: {top: 10},
      startY,
    });

    // Increment Y position for the next row
    startY += 10; 

    // Generate rows
    data.forEach((row) => {
      // Check if the page height will be exceeded
      if (startY + 10 > doc.internal.pageSize.height) {
        // Add a new page
        doc.addPage();
        startY = 20; // Reset Y position
      }

      // Generate the table row
      doc.autoTable({
        body: [row], 
        startY,
      });
        
      // Increment Y position for the next row
      startY += 10; 
    });
  
    // Convert the PDF blob to a Base64 string
    const pdfBlob = doc.output('blob');
  
    // Create a file-saver Blob object
    const file = new Blob([pdfBlob], { type: 'application/pdf' });
  
    // Save the Blob to a file
    saveAs(file, 'entertainer_report.pdf');
  }

  // Formatting the date for the report
  formatDate(date: Date): string
  {
    const day = date.getDate();
    const month = date.toLocaleString('default', { month: 'long'});
    const year = date.getFullYear();
    return `${day} ${month} ${year}`;
  }
}
