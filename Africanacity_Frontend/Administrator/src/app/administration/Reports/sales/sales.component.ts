import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { DataService } from 'src/app/service/data.Service';
import { KitchenOrder } from 'src/app/shared/Kitchen_Order';
import { VAT } from 'src/app/shared/Vat';
import { Discount } from 'src/app/shared/Discount';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { saveAs } from 'file-saver';
import { AuthService } from 'src/app/UserService/auth.service';
import { UserStoreService } from 'src/app/UserService/user-store.service';

@Component({
  selector: 'app-sales',
  templateUrl: './sales.component.html',
  styleUrls: ['./sales.component.css']
})
export class SalesComponent implements OnInit{
  KitchenOrders: KitchenOrder[] = [];
  Vat: VAT[] = [];
  Discount: Discount[] = [];
  userName: string = "";

  constructor (private http: HttpClient, 
    private dataService: DataService, 
    private auth: AuthService, 
    private userService: UserStoreService) { }

  ngOnInit() {
    this.GetAllKitchenOrders();
    console.log("data", this.KitchenOrders)
  }

  // Getting all kitchen orders
  GetAllKitchenOrders()
  {
    this.dataService.getAllKitchenOrders().subscribe(result => {
      this.KitchenOrders = result;
    })
  }

  // Generate PDF
  downloadPDF() {
    const doc = new jsPDF();
    doc.setFontSize(18);
    doc.text('Sales Report', 105, 25, { align: 'center' });
  
    // Add logo to the top left corner of the first page
    const logoImageUrl = 'assets/Pictures/Logo Black.png'; 
    const logoWidth = 10; 
    const logoHeight = 10; 
    doc.addImage(logoImageUrl, 'PNG', 100, 5, logoWidth, logoHeight);

    // Get the current date
    const currentDate = this.formatDate(new Date());
    const pageWidth = doc.internal.pageSize.getWidth();
    doc.setFontSize(10);
    doc.text(`Downloaded on: ${currentDate}`, pageWidth - 70, 10);

    // Add user name to report
    this.userService.getFullNameFromStore()
    .subscribe(val=>{
      const fullNameFromToken = this.auth.getfullNameFromToken();
      this.userName = val || fullNameFromToken
    });

    doc.setFontSize(10);
    doc.text(`Generated by: ${this.userName}`, pageWidth - 70, 15 )
  
    doc.setFontSize(12);
  
    // Adjust the Y position to leave space below the logo
    let startY = 40; 
    let grandTotal = 0;
  
    // Generate the table for the current inventory type
    const headers = ['', 'Order Date', 'Order Number', 'Subtotal', 'Vat', 'Discount', 'Unit Price', 'Total Product Price'];
        
    // Default: Display kitchen orders by Order Id
    let ordersToDisplay = this.KitchenOrders;

    const data = ordersToDisplay.map(order => [
      order.kitchenOrderId,
      order.Order_Date,
      order.kitchenOrderNumber,
      order.Subtotal,
      order.Vat,
      order.Discount,
      order.Total
    ]);

    // Generate headers
    doc.autoTable({
      head: [headers],
      startY,
    });

    // Increment Y position for the next row
    startY += 10; 
        
    // Generate the table row
    doc.autoTable({
      body: data,
      startY,
    });
  
    // Increment Y position for the next table
    startY += (data.length * 10) + 10; 
      
    //const subtotal = this.calculateSubtotal(typeName);

    // Format subtotal in the same way as the HTML
    //const formattedSubtotal = `Subtotal: R ${subtotal.toFixed(2)}`;

    //doc.text(formattedSubtotal, 15, startY - 10);
    // Increment Y position for the subtotal row
    //startY += 10; 

    //grandTotal += subtotal;
    //  };
  }

  // Formatting the date for the report
  formatDate(date: Date): string
  {
    const day = date.getDate();
    const month = date.toLocaleString('default', { month: 'long'});
    const year = date.getFullYear();
    return `${day} ${month} ${year}`;
  } 
}
